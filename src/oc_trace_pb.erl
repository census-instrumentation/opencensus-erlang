%% @hidden
%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.1
-module(oc_trace_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_opencensus.proto.trace.v1.Span.SpanKind'/1, 'enum_value_by_symbol_opencensus.proto.trace.v1.Span.SpanKind'/1]).
-export(['enum_symbol_by_value_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'/1, 'enum_value_by_symbol_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'/1]).
-export(['enum_symbol_by_value_opencensus.proto.trace.v1.Span.Link.Type'/1, 'enum_value_by_symbol_opencensus.proto.trace.v1.Span.Link.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("oc_trace_pb.hrl").

%% enumerated types
-type 'opencensus.proto.trace.v1.Span.SpanKind'() :: 'SPAN_KIND_UNSPECIFIED' | 'SERVER' | 'CLIENT'.
-type 'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'() :: 'TYPE_UNSPECIFIED' | 'SENT' | 'RECEIVED'.
-type 'opencensus.proto.trace.v1.Span.Link.Type'() :: 'TYPE_UNSPECIFIED' | 'CHILD_LINKED_SPAN' | 'PARENT_LINKED_SPAN'.
-export_type(['opencensus.proto.trace.v1.Span.SpanKind'/0, 'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'/0, 'opencensus.proto.trace.v1.Span.Link.Type'/0]).

%% message types
-type tracestate_pb() :: #tracestate_pb{}.

-type entry_pb() :: #entry_pb{}.

-type attributes_pb() :: #attributes_pb{}.

-type time_event_pb() :: #time_event_pb{}.

-type message_event_pb() :: #message_event_pb{}.

-type annotation_pb() :: #annotation_pb{}.

-type time_events_pb() :: #time_events_pb{}.

-type link_pb() :: #link_pb{}.

-type links_pb() :: #links_pb{}.

-type span_pb() :: #span_pb{}.

-type status_pb() :: #status_pb{}.

-type attribute_value_pb() :: #attribute_value_pb{}.

-type stack_frame_pb() :: #stack_frame_pb{}.

-type stack_frames_pb() :: #stack_frames_pb{}.

-type stack_trace_pb() :: #stack_trace_pb{}.

-type module_pb() :: #module_pb{}.

-type truncatable_string_pb() :: #truncatable_string_pb{}.

-type timestamp_pb() :: #timestamp_pb{}.

-type double_value_pb() :: #double_value_pb{}.

-type float_value_pb() :: #float_value_pb{}.

-type int_64_value_pb() :: #int_64_value_pb{}.

-type u_int_64_value_pb() :: #u_int_64_value_pb{}.

-type int_32_value_pb() :: #int_32_value_pb{}.

-type u_int_32_value_pb() :: #u_int_32_value_pb{}.

-type bool_value_pb() :: #bool_value_pb{}.

-type string_value_pb() :: #string_value_pb{}.

-type bytes_value_pb() :: #bytes_value_pb{}.

-export_type(['tracestate_pb'/0, 'entry_pb'/0, 'attributes_pb'/0, 'time_event_pb'/0, 'message_event_pb'/0, 'annotation_pb'/0, 'time_events_pb'/0, 'link_pb'/0, 'links_pb'/0, 'span_pb'/0, 'status_pb'/0, 'attribute_value_pb'/0, 'stack_frame_pb'/0, 'stack_frames_pb'/0, 'stack_trace_pb'/0, 'module_pb'/0, 'truncatable_string_pb'/0, 'timestamp_pb'/0, 'double_value_pb'/0, 'float_value_pb'/0, 'int_64_value_pb'/0, 'u_int_64_value_pb'/0, 'int_32_value_pb'/0, 'u_int_32_value_pb'/0, 'bool_value_pb'/0, 'string_value_pb'/0, 'bytes_value_pb'/0]).

-spec encode_msg(#tracestate_pb{} | #entry_pb{} | #attributes_pb{} | #time_event_pb{} | #message_event_pb{} | #annotation_pb{} | #time_events_pb{} | #link_pb{} | #links_pb{} | #span_pb{} | #status_pb{} | #attribute_value_pb{} | #stack_frame_pb{} | #stack_frames_pb{} | #stack_trace_pb{} | #module_pb{} | #truncatable_string_pb{} | #timestamp_pb{} | #double_value_pb{} | #float_value_pb{} | #int_64_value_pb{} | #u_int_64_value_pb{} | #int_32_value_pb{} | #u_int_32_value_pb{} | #bool_value_pb{} | #string_value_pb{} | #bytes_value_pb{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#tracestate_pb{} | #entry_pb{} | #attributes_pb{} | #time_event_pb{} | #message_event_pb{} | #annotation_pb{} | #time_events_pb{} | #link_pb{} | #links_pb{} | #span_pb{} | #status_pb{} | #attribute_value_pb{} | #stack_frame_pb{} | #stack_frames_pb{} | #stack_trace_pb{} | #module_pb{} | #truncatable_string_pb{} | #timestamp_pb{} | #double_value_pb{} | #float_value_pb{} | #int_64_value_pb{} | #u_int_64_value_pb{} | #int_32_value_pb{} | #u_int_32_value_pb{} | #bool_value_pb{} | #string_value_pb{} | #bytes_value_pb{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#tracestate_pb{} | #entry_pb{} | #attributes_pb{} | #time_event_pb{} | #message_event_pb{} | #annotation_pb{} | #time_events_pb{} | #link_pb{} | #links_pb{} | #span_pb{} | #status_pb{} | #attribute_value_pb{} | #stack_frame_pb{} | #stack_frames_pb{} | #stack_trace_pb{} | #module_pb{} | #truncatable_string_pb{} | #timestamp_pb{} | #double_value_pb{} | #float_value_pb{} | #int_64_value_pb{} | #u_int_64_value_pb{} | #int_32_value_pb{} | #u_int_32_value_pb{} | #bool_value_pb{} | #string_value_pb{} | #bytes_value_pb{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      tracestate_pb ->
	  encode_msg_tracestate_pb(id(Msg, TrUserData),
				   TrUserData);
      entry_pb ->
	  encode_msg_entry_pb(id(Msg, TrUserData), TrUserData);
      attributes_pb ->
	  encode_msg_attributes_pb(id(Msg, TrUserData),
				   TrUserData);
      time_event_pb ->
	  encode_msg_time_event_pb(id(Msg, TrUserData),
				   TrUserData);
      message_event_pb ->
	  encode_msg_message_event_pb(id(Msg, TrUserData),
				      TrUserData);
      annotation_pb ->
	  encode_msg_annotation_pb(id(Msg, TrUserData),
				   TrUserData);
      time_events_pb ->
	  encode_msg_time_events_pb(id(Msg, TrUserData),
				    TrUserData);
      link_pb ->
	  encode_msg_link_pb(id(Msg, TrUserData), TrUserData);
      links_pb ->
	  encode_msg_links_pb(id(Msg, TrUserData), TrUserData);
      span_pb ->
	  encode_msg_span_pb(id(Msg, TrUserData), TrUserData);
      status_pb ->
	  encode_msg_status_pb(id(Msg, TrUserData), TrUserData);
      attribute_value_pb ->
	  encode_msg_attribute_value_pb(id(Msg, TrUserData),
					TrUserData);
      stack_frame_pb ->
	  encode_msg_stack_frame_pb(id(Msg, TrUserData),
				    TrUserData);
      stack_frames_pb ->
	  encode_msg_stack_frames_pb(id(Msg, TrUserData),
				     TrUserData);
      stack_trace_pb ->
	  encode_msg_stack_trace_pb(id(Msg, TrUserData),
				    TrUserData);
      module_pb ->
	  encode_msg_module_pb(id(Msg, TrUserData), TrUserData);
      truncatable_string_pb ->
	  encode_msg_truncatable_string_pb(id(Msg, TrUserData),
					   TrUserData);
      timestamp_pb ->
	  encode_msg_timestamp_pb(id(Msg, TrUserData),
				  TrUserData);
      double_value_pb ->
	  encode_msg_double_value_pb(id(Msg, TrUserData),
				     TrUserData);
      float_value_pb ->
	  encode_msg_float_value_pb(id(Msg, TrUserData),
				    TrUserData);
      int_64_value_pb ->
	  encode_msg_int_64_value_pb(id(Msg, TrUserData),
				     TrUserData);
      u_int_64_value_pb ->
	  encode_msg_u_int_64_value_pb(id(Msg, TrUserData),
				       TrUserData);
      int_32_value_pb ->
	  encode_msg_int_32_value_pb(id(Msg, TrUserData),
				     TrUserData);
      u_int_32_value_pb ->
	  encode_msg_u_int_32_value_pb(id(Msg, TrUserData),
				       TrUserData);
      bool_value_pb ->
	  encode_msg_bool_value_pb(id(Msg, TrUserData),
				   TrUserData);
      string_value_pb ->
	  encode_msg_string_value_pb(id(Msg, TrUserData),
				     TrUserData);
      bytes_value_pb ->
	  encode_msg_bytes_value_pb(id(Msg, TrUserData),
				    TrUserData)
    end.


encode_msg_tracestate_pb(Msg, TrUserData) ->
    encode_msg_tracestate_pb(Msg, <<>>, TrUserData).


encode_msg_tracestate_pb(#tracestate_pb{entries = F1},
			 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_tracestate_pb_entries(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_entry_pb(Msg, TrUserData) ->
    encode_msg_entry_pb(Msg, <<>>, TrUserData).


encode_msg_entry_pb(#entry_pb{key = F1, value = F2},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_attributes_pb(Msg, TrUserData) ->
    encode_msg_attributes_pb(Msg, <<>>, TrUserData).


encode_msg_attributes_pb(#attributes_pb{attribute_map =
					    F1,
					dropped_attributes_count = F2},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = 'tr_encode_attributes_pb.attribute_map'(F1,
							  TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_attributes_pb_attribute_map(TrF1, Bin,
						      TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_time_event_pb(Msg, TrUserData) ->
    encode_msg_time_event_pb(Msg, <<>>, TrUserData).


encode_msg_time_event_pb(#time_event_pb{time = F1,
					value = F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_time_event_pb_time(TrF1, <<Bin/binary, 10>>,
						     TrUserData)
		  end
		end
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {annotation, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_time_event_pb_annotation(TrTF2,
						     <<B1/binary, 18>>,
						     TrUserData)
		 end;
	     {message_event, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_time_event_pb_message_event(TrTF2,
							<<B1/binary, 26>>,
							TrUserData)
		 end
	   end
    end.

encode_msg_message_event_pb(Msg, TrUserData) ->
    encode_msg_message_event_pb(Msg, <<>>, TrUserData).


encode_msg_message_event_pb(#message_event_pb{type = F1,
					      id = F2, uncompressed_size = F3,
					      compressed_size = F4},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'TYPE_UNSPECIFIED'; TrF1 =:= 0 -> Bin;
		     true ->
			 'e_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(TrF1,
											     <<Bin/binary,
											       8>>,
											     'MaybeTrUserData')
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= 0 -> B3;
		true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	     end
	   end
    end.

encode_msg_annotation_pb(Msg, TrUserData) ->
    encode_msg_annotation_pb(Msg, <<>>, TrUserData).


encode_msg_annotation_pb(#annotation_pb{description =
					    F1,
					attributes = F2},
			 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_annotation_pb_description(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_annotation_pb_attributes(TrF2,
						      <<B1/binary, 18>>,
						      TrUserData)
	     end
	   end
    end.

encode_msg_time_events_pb(Msg, TrUserData) ->
    encode_msg_time_events_pb(Msg, <<>>, TrUserData).


encode_msg_time_events_pb(#time_events_pb{time_event =
					      F1,
					  dropped_annotations_count = F2,
					  dropped_message_events_count = F3},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_time_events_pb_time_event(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     if TrF3 =:= 0 -> B2;
		true ->
		    e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	     end
	   end
    end.

encode_msg_link_pb(Msg, TrUserData) ->
    encode_msg_link_pb(Msg, <<>>, TrUserData).


encode_msg_link_pb(#link_pb{trace_id = F1, span_id = F2,
			    type = F3, attributes = F4},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 'TYPE_UNSPECIFIED'; TrF3 =:= 0 -> B2;
		     true ->
			 'e_enum_opencensus.proto.trace.v1.Span.Link.Type'(TrF3,
									   <<B2/binary,
									     24>>,
									   'MaybeTrUserData')
		  end
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     if TrF4 =:= undefined -> B3;
		true ->
		    e_mfield_link_pb_attributes(TrF4, <<B3/binary, 34>>,
						TrUserData)
	     end
	   end
    end.

encode_msg_links_pb(Msg, TrUserData) ->
    encode_msg_links_pb(Msg, <<>>, TrUserData).


encode_msg_links_pb(#links_pb{link = F1,
			      dropped_links_count = F2},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_links_pb_link(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_span_pb(Msg, TrUserData) ->
    encode_msg_span_pb(Msg, <<>>, TrUserData).


encode_msg_span_pb(#span_pb{trace_id = F1, span_id = F2,
			    tracestate = F3, parent_span_id = F4, name = F5,
			    kind = F6, start_time = F7, end_time = F8,
			    attributes = F9, stack_trace = F10,
			    time_events = F11, links = F12, status = F13,
			    same_process_as_parent_span = F14,
			    child_span_count = F15},
		   Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case iolist_size(TrF1) of
		    0 -> Bin;
		    _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_span_pb_tracestate(TrF3, <<B2/binary, 122>>,
						     TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  case iolist_size(TrF4) of
		    0 -> B3;
		    _ -> e_type_bytes(TrF4, <<B3/binary, 26>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_span_pb_name(TrF5, <<B4/binary, 34>>,
					       TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'SPAN_KIND_UNSPECIFIED'; TrF6 =:= 0 -> B5;
		     true ->
			 'e_enum_opencensus.proto.trace.v1.Span.SpanKind'(TrF6,
									  <<B5/binary,
									    112>>,
									  'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= undefined -> B6;
		     true ->
			 e_mfield_span_pb_start_time(TrF7, <<B6/binary, 42>>,
						     TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= undefined -> B7;
		     true ->
			 e_mfield_span_pb_end_time(TrF8, <<B7/binary, 50>>,
						   TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= undefined -> B8;
		     true ->
			 e_mfield_span_pb_attributes(TrF9, <<B8/binary, 58>>,
						     TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= undefined -> B9;
		      true ->
			  e_mfield_span_pb_stack_trace(TrF10, <<B9/binary, 66>>,
						       TrUserData)
		   end
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   if TrF11 =:= undefined -> B10;
		      true ->
			  e_mfield_span_pb_time_events(TrF11,
						       <<B10/binary, 74>>,
						       TrUserData)
		   end
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   if TrF12 =:= undefined -> B11;
		      true ->
			  e_mfield_span_pb_links(TrF12, <<B11/binary, 82>>,
						 TrUserData)
		   end
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   if TrF13 =:= undefined -> B12;
		      true ->
			  e_mfield_span_pb_status(TrF13, <<B12/binary, 90>>,
						  TrUserData)
		   end
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   if TrF14 =:= undefined -> B13;
		      true ->
			  e_mfield_span_pb_same_process_as_parent_span(TrF14,
								       <<B13/binary,
									 98>>,
								       TrUserData)
		   end
		 end
	  end,
    if F15 == undefined -> B14;
       true ->
	   begin
	     TrF15 = id(F15, TrUserData),
	     if TrF15 =:= undefined -> B14;
		true ->
		    e_mfield_span_pb_child_span_count(TrF15,
						      <<B14/binary, 106>>,
						      TrUserData)
	     end
	   end
    end.

encode_msg_status_pb(Msg, TrUserData) ->
    encode_msg_status_pb(Msg, <<>>, TrUserData).


encode_msg_status_pb(#status_pb{code = F1,
				message = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     case is_empty_string(TrF2) of
	       true -> B1;
	       false ->
		   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	     end
	   end
    end.

encode_msg_attribute_value_pb(Msg, TrUserData) ->
    encode_msg_attribute_value_pb(Msg, <<>>, TrUserData).


encode_msg_attribute_value_pb(#attribute_value_pb{value
						      = F1},
			      Bin, TrUserData) ->
    if F1 =:= undefined -> Bin;
       true ->
	   case id(F1, TrUserData) of
	     {string_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_mfield_attribute_value_pb_string_value(TrTF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		 end;
	     {int_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_int64(TrTF1, <<Bin/binary, 16>>, TrUserData)
		 end;
	     {bool_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_bool(TrTF1, <<Bin/binary, 24>>, TrUserData)
		 end;
	     {double_value, TF1} ->
		 begin
		   TrTF1 = id(TF1, TrUserData),
		   e_type_double(TrTF1, <<Bin/binary, 33>>, TrUserData)
		 end
	   end
    end.

encode_msg_stack_frame_pb(Msg, TrUserData) ->
    encode_msg_stack_frame_pb(Msg, <<>>, TrUserData).


encode_msg_stack_frame_pb(#stack_frame_pb{function_name
					      = F1,
					  original_function_name = F2,
					  file_name = F3, line_number = F4,
					  column_number = F5, load_module = F6,
					  source_version = F7},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_stack_frame_pb_function_name(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= undefined -> B1;
		     true ->
			 e_mfield_stack_frame_pb_original_function_name(TrF2,
									<<B1/binary,
									  18>>,
									TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= undefined -> B2;
		     true ->
			 e_mfield_stack_frame_pb_file_name(TrF3,
							   <<B2/binary, 26>>,
							   TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 0 -> B4;
		     true ->
			 e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= undefined -> B5;
		     true ->
			 e_mfield_stack_frame_pb_load_module(TrF6,
							     <<B5/binary, 50>>,
							     TrUserData)
		  end
		end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     if TrF7 =:= undefined -> B6;
		true ->
		    e_mfield_stack_frame_pb_source_version(TrF7,
							   <<B6/binary, 58>>,
							   TrUserData)
	     end
	   end
    end.

encode_msg_stack_frames_pb(Msg, TrUserData) ->
    encode_msg_stack_frames_pb(Msg, <<>>, TrUserData).


encode_msg_stack_frames_pb(#stack_frames_pb{frame = F1,
					    dropped_frames_count = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_stack_frames_pb_frame(TrF1, Bin, TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_stack_trace_pb(Msg, TrUserData) ->
    encode_msg_stack_trace_pb(Msg, <<>>, TrUserData).


encode_msg_stack_trace_pb(#stack_trace_pb{stack_frames =
					      F1,
					  stack_trace_hash_id = F2},
			  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_stack_trace_pb_stack_frames(TrF1,
							      <<Bin/binary,
								10>>,
							      TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_module_pb(Msg, TrUserData) ->
    encode_msg_module_pb(Msg, <<>>, TrUserData).


encode_msg_module_pb(#module_pb{module = F1,
				build_id = F2},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 e_mfield_module_pb_module(TrF1, <<Bin/binary, 10>>,
						   TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    e_mfield_module_pb_build_id(TrF2, <<B1/binary, 18>>,
						TrUserData)
	     end
	   end
    end.

encode_msg_truncatable_string_pb(Msg, TrUserData) ->
    encode_msg_truncatable_string_pb(Msg, <<>>, TrUserData).


encode_msg_truncatable_string_pb(#truncatable_string_pb{value
							    = F1,
							truncated_byte_count =
							    F2},
				 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  case is_empty_string(TrF1) of
		    true -> Bin;
		    false ->
			e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_timestamp_pb(Msg, TrUserData) ->
    encode_msg_timestamp_pb(Msg, <<>>, TrUserData).


encode_msg_timestamp_pb(#timestamp_pb{seconds = F1,
				      nanos = F2},
			Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true ->
			 e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= 0 -> B1;
		true ->
		    e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	     end
	   end
    end.

encode_msg_double_value_pb(Msg, TrUserData) ->
    encode_msg_double_value_pb(Msg, <<>>, TrUserData).


encode_msg_double_value_pb(#double_value_pb{value = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	     end
	   end
    end.

encode_msg_float_value_pb(Msg, TrUserData) ->
    encode_msg_float_value_pb(Msg, <<>>, TrUserData).


encode_msg_float_value_pb(#float_value_pb{value = F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	     end
	   end
    end.

encode_msg_int_64_value_pb(Msg, TrUserData) ->
    encode_msg_int_64_value_pb(Msg, <<>>, TrUserData).


encode_msg_int_64_value_pb(#int_64_value_pb{value = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_u_int_64_value_pb(Msg, TrUserData) ->
    encode_msg_u_int_64_value_pb(Msg, <<>>, TrUserData).


encode_msg_u_int_64_value_pb(#u_int_64_value_pb{value =
						    F1},
			     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_int_32_value_pb(Msg, TrUserData) ->
    encode_msg_int_32_value_pb(Msg, <<>>, TrUserData).


encode_msg_int_32_value_pb(#int_32_value_pb{value = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_u_int_32_value_pb(Msg, TrUserData) ->
    encode_msg_u_int_32_value_pb(Msg, <<>>, TrUserData).


encode_msg_u_int_32_value_pb(#u_int_32_value_pb{value =
						    F1},
			     Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_bool_value_pb(Msg, TrUserData) ->
    encode_msg_bool_value_pb(Msg, <<>>, TrUserData).


encode_msg_bool_value_pb(#bool_value_pb{value = F1},
			 Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_string_value_pb(Msg, TrUserData) ->
    encode_msg_string_value_pb(Msg, <<>>, TrUserData).


encode_msg_string_value_pb(#string_value_pb{value = F1},
			   Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case is_empty_string(TrF1) of
	       true -> Bin;
	       false ->
		   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

encode_msg_bytes_value_pb(Msg, TrUserData) ->
    encode_msg_bytes_value_pb(Msg, <<>>, TrUserData).


encode_msg_bytes_value_pb(#bytes_value_pb{value = F1},
			  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     case iolist_size(TrF1) of
	       0 -> Bin;
	       _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	     end
	   end
    end.

e_mfield_tracestate_pb_entries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_entry_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_tracestate_pb_entries([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_tracestate_pb_entries(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_tracestate_pb_entries(Rest, Bin3, TrUserData);
e_field_tracestate_pb_entries([], Bin, _TrUserData) ->
    Bin.

e_mfield_attributes_pb_attribute_map(Msg, Bin,
				     TrUserData) ->
    SubBin =
	'encode_msg_map<string,attribute_value_pb>'(Msg, <<>>,
						    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_attributes_pb_attribute_map([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_attributes_pb_attribute_map('tr_encode_attributes_pb.attribute_map[x]'(Elem,
											TrUserData),
					     Bin2, TrUserData),
    e_field_attributes_pb_attribute_map(Rest, Bin3,
					TrUserData);
e_field_attributes_pb_attribute_map([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_time_event_pb_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_event_pb_annotation(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_annotation_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_event_pb_message_event(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_message_event_pb(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_annotation_pb_description(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_annotation_pb_attributes(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_attributes_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_events_pb_time_event(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_time_event_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_time_events_pb_time_event([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_time_events_pb_time_event(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_time_events_pb_time_event(Rest, Bin3,
				      TrUserData);
e_field_time_events_pb_time_event([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_link_pb_attributes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_attributes_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_links_pb_link(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_link_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_links_pb_link([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_links_pb_link(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_links_pb_link(Rest, Bin3, TrUserData);
e_field_links_pb_link([], Bin, _TrUserData) -> Bin.

e_mfield_span_pb_tracestate(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_tracestate_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_name(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_start_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_end_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_attributes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_attributes_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_stack_trace(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_stack_trace_pb(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_time_events(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_time_events_pb(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_links(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_links_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_status(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_status_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_same_process_as_parent_span(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_bool_value_pb(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_pb_child_span_count(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_u_int_32_value_pb(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_attribute_value_pb_string_value(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_pb_function_name(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_pb_original_function_name(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_pb_file_name(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_pb_load_module(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_module_pb(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_pb_source_version(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frames_pb_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_stack_frame_pb(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_stack_frames_pb_frame([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_stack_frames_pb_frame(id(Elem,
					     TrUserData),
					  Bin2, TrUserData),
    e_field_stack_frames_pb_frame(Rest, Bin3, TrUserData);
e_field_stack_frames_pb_frame([], Bin, _TrUserData) ->
    Bin.

e_mfield_stack_trace_pb_stack_frames(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_stack_frames_pb(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_module_pb_module(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_module_pb_build_id(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string_pb(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<string,attribute_value_pb>'(#{key := F1,
					      value := F2},
					    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,attribute_value_pb>_value'(TrF2,
						      <<B1/binary, 18>>,
						      TrUserData)
    end.

'e_mfield_map<string,attribute_value_pb>_value'(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_attribute_value_pb(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_opencensus.proto.trace.v1.Span.SpanKind'('SPAN_KIND_UNSPECIFIED',
						 Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_opencensus.proto.trace.v1.Span.SpanKind'('SERVER',
						 Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_opencensus.proto.trace.v1.Span.SpanKind'('CLIENT',
						 Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_opencensus.proto.trace.v1.Span.SpanKind'(V, Bin,
						 _TrUserData) ->
    e_varint(V, Bin).

'e_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED',
								    Bin,
								    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('SENT',
								    Bin,
								    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('RECEIVED',
								    Bin,
								    _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(V,
								    Bin,
								    _TrUserData) ->
    e_varint(V, Bin).

'e_enum_opencensus.proto.trace.v1.Span.Link.Type'('TYPE_UNSPECIFIED',
						  Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_opencensus.proto.trace.v1.Span.Link.Type'('CHILD_LINKED_SPAN',
						  Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_opencensus.proto.trace.v1.Span.Link.Type'('PARENT_LINKED_SPAN',
						  Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_opencensus.proto.trace.v1.Span.Link.Type'(V,
						  Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(tracestate_pb, Bin, TrUserData) ->
    id(decode_msg_tracestate_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(entry_pb, Bin, TrUserData) ->
    id(decode_msg_entry_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(attributes_pb, Bin, TrUserData) ->
    id(decode_msg_attributes_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(time_event_pb, Bin, TrUserData) ->
    id(decode_msg_time_event_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(message_event_pb, Bin, TrUserData) ->
    id(decode_msg_message_event_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(annotation_pb, Bin, TrUserData) ->
    id(decode_msg_annotation_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(time_events_pb, Bin, TrUserData) ->
    id(decode_msg_time_events_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(link_pb, Bin, TrUserData) ->
    id(decode_msg_link_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(links_pb, Bin, TrUserData) ->
    id(decode_msg_links_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(span_pb, Bin, TrUserData) ->
    id(decode_msg_span_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(status_pb, Bin, TrUserData) ->
    id(decode_msg_status_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(attribute_value_pb, Bin,
		  TrUserData) ->
    id(decode_msg_attribute_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stack_frame_pb, Bin, TrUserData) ->
    id(decode_msg_stack_frame_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stack_frames_pb, Bin, TrUserData) ->
    id(decode_msg_stack_frames_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stack_trace_pb, Bin, TrUserData) ->
    id(decode_msg_stack_trace_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(module_pb, Bin, TrUserData) ->
    id(decode_msg_module_pb(Bin, TrUserData), TrUserData);
decode_msg_2_doit(truncatable_string_pb, Bin,
		  TrUserData) ->
    id(decode_msg_truncatable_string_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(timestamp_pb, Bin, TrUserData) ->
    id(decode_msg_timestamp_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(double_value_pb, Bin, TrUserData) ->
    id(decode_msg_double_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(float_value_pb, Bin, TrUserData) ->
    id(decode_msg_float_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(int_64_value_pb, Bin, TrUserData) ->
    id(decode_msg_int_64_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_64_value_pb, Bin, TrUserData) ->
    id(decode_msg_u_int_64_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(int_32_value_pb, Bin, TrUserData) ->
    id(decode_msg_int_32_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_32_value_pb, Bin, TrUserData) ->
    id(decode_msg_u_int_32_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bool_value_pb, Bin, TrUserData) ->
    id(decode_msg_bool_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(string_value_pb, Bin, TrUserData) ->
    id(decode_msg_string_value_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bytes_value_pb, Bin, TrUserData) ->
    id(decode_msg_bytes_value_pb(Bin, TrUserData),
       TrUserData).



decode_msg_tracestate_pb(Bin, TrUserData) ->
    dfp_read_field_def_tracestate_pb(Bin, 0, 0,
				     id([], TrUserData), TrUserData).

dfp_read_field_def_tracestate_pb(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    d_field_tracestate_pb_entries(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_tracestate_pb(<<>>, 0, 0, R1,
				 TrUserData) ->
    #tracestate_pb{entries = lists_reverse(R1, TrUserData)};
dfp_read_field_def_tracestate_pb(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_tracestate_pb(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_tracestate_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tracestate_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_tracestate_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_tracestate_pb_entries(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_tracestate_pb(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_tracestate_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_tracestate_pb(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_tracestate_pb(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_tracestate_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_tracestate_pb(<<>>, 0, 0, R1,
				TrUserData) ->
    #tracestate_pb{entries = lists_reverse(R1, TrUserData)}.

d_field_tracestate_pb_entries(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_tracestate_pb_entries(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_tracestate_pb_entries(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_entry_pb(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_tracestate_pb(RestF, 0, 0,
				     cons(NewFValue, Prev, TrUserData),
				     TrUserData).

skip_varint_tracestate_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_tracestate_pb(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_tracestate_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_tracestate_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_tracestate_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_tracestate_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_tracestate_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tracestate_pb(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_tracestate_pb(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tracestate_pb(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_tracestate_pb(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_tracestate_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_tracestate_pb(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_tracestate_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_entry_pb(Bin, TrUserData) ->
    dfp_read_field_def_entry_pb(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				TrUserData).

dfp_read_field_def_entry_pb(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_entry_pb_key(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_entry_pb(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_entry_pb_value(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_entry_pb(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #entry_pb{key = F@_1, value = F@_2};
dfp_read_field_def_entry_pb(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_entry_pb(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_entry_pb(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_entry_pb(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_entry_pb(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_entry_pb_key(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_entry_pb_value(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_entry_pb(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_entry_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_entry_pb(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_entry_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_entry_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_entry_pb(<<>>, 0, 0, F@_1, F@_2, _) ->
    #entry_pb{key = F@_1, value = F@_2}.

d_field_entry_pb_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_entry_pb_key(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_entry_pb_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_entry_pb(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_entry_pb_value(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_entry_pb_value(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_entry_pb_value(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_entry_pb(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_entry_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_entry_pb(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_entry_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_entry_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_entry_pb(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_entry_pb(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_entry_pb(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_entry_pb(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_entry_pb(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_entry_pb(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_entry_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_entry_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_entry_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_entry_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_attributes_pb(Bin, TrUserData) ->
    dfp_read_field_def_attributes_pb(Bin, 0, 0,
				     'tr_decode_init_default_attributes_pb.attribute_map'([],
											  TrUserData),
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_attributes_pb(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_attributes_pb_attribute_map(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_attributes_pb(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_attributes_pb_dropped_attributes_count(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_attributes_pb(<<>>, 0, 0, R1, F@_2,
				 TrUserData) ->
    #attributes_pb{attribute_map =
		       'tr_decode_repeated_finalize_attributes_pb.attribute_map'(R1,
										 TrUserData),
		   dropped_attributes_count = F@_2};
dfp_read_field_def_attributes_pb(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_attributes_pb(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_attributes_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_attributes_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_attributes_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_attributes_pb_attribute_map(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_attributes_pb_dropped_attributes_count(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_attributes_pb(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_attributes_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_attributes_pb(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_attributes_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_attributes_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_attributes_pb(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    #attributes_pb{attribute_map =
		       'tr_decode_repeated_finalize_attributes_pb.attribute_map'(R1,
										 TrUserData),
		   dropped_attributes_count = F@_2}.

d_field_attributes_pb_attribute_map(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_attributes_pb_attribute_map(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_attributes_pb_attribute_map(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,attribute_value_pb>'(Bs,
									   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_attributes_pb(RestF, 0, 0,
				     'tr_decode_repeated_add_elem_attributes_pb.attribute_map'(NewFValue,
											       Prev,
											       TrUserData),
				     F@_2, TrUserData).

d_field_attributes_pb_dropped_attributes_count(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_attributes_pb_dropped_attributes_count(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
d_field_attributes_pb_dropped_attributes_count(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_attributes_pb(RestF, 0, 0, F@_1,
				     NewFValue, TrUserData).

skip_varint_attributes_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_attributes_pb(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_attributes_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_attributes_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_attributes_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_attributes_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_attributes_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_attributes_pb(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_attributes_pb(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_attributes_pb(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_attributes_pb(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_attributes_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_attributes_pb(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_attributes_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_time_event_pb(Bin, TrUserData) ->
    dfp_read_field_def_time_event_pb(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_time_event_pb(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_pb_time(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_time_event_pb(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_pb_annotation(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_time_event_pb(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_pb_message_event(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_time_event_pb(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #time_event_pb{time = F@_1, value = F@_2};
dfp_read_field_def_time_event_pb(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_time_event_pb(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_time_event_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_time_event_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_time_event_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_time_event_pb_time(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_time_event_pb_annotation(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      26 ->
	  d_field_time_event_pb_message_event(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_time_event_pb(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_time_event_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_time_event_pb(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_time_event_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_time_event_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_time_event_pb(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #time_event_pb{time = F@_1, value = F@_2}.

d_field_time_event_pb_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_pb_time(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_time_event_pb_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event_pb(RestF, 0, 0,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_timestamp_pb(Prev,
								   NewFValue,
								   TrUserData)
				     end,
				     F@_2, TrUserData).

d_field_time_event_pb_annotation(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_pb_annotation(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_time_event_pb_annotation(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_annotation_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event_pb(RestF, 0, 0, F@_1,
				     case Prev of
				       undefined ->
					   id({annotation, NewFValue},
					      TrUserData);
				       {annotation, MVPrev} ->
					   id({annotation,
					       merge_msg_annotation_pb(MVPrev,
								       NewFValue,
								       TrUserData)},
					      TrUserData);
				       _ ->
					   id({annotation, NewFValue},
					      TrUserData)
				     end,
				     TrUserData).

d_field_time_event_pb_message_event(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_pb_message_event(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_time_event_pb_message_event(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_message_event_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event_pb(RestF, 0, 0, F@_1,
				     case Prev of
				       undefined ->
					   id({message_event, NewFValue},
					      TrUserData);
				       {message_event, MVPrev} ->
					   id({message_event,
					       merge_msg_message_event_pb(MVPrev,
									  NewFValue,
									  TrUserData)},
					      TrUserData);
				       _ ->
					   id({message_event, NewFValue},
					      TrUserData)
				     end,
				     TrUserData).

skip_varint_time_event_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_time_event_pb(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_time_event_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_time_event_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_time_event_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_time_event_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_time_event_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_time_event_pb(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_time_event_pb(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_time_event_pb(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_time_event_pb(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_time_event_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_time_event_pb(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_time_event_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_message_event_pb(Bin, TrUserData) ->
    dfp_read_field_def_message_event_pb(Bin, 0, 0,
					id('TYPE_UNSPECIFIED', TrUserData),
					id(0, TrUserData), id(0, TrUserData),
					id(0, TrUserData), TrUserData).

dfp_read_field_def_message_event_pb(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_message_event_pb_type(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_message_event_pb(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_message_event_pb_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_message_event_pb(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_message_event_pb_uncompressed_size(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData);
dfp_read_field_def_message_event_pb(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_message_event_pb_compressed_size(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
dfp_read_field_def_message_event_pb(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #message_event_pb{type = F@_1, id = F@_2,
		      uncompressed_size = F@_3, compressed_size = F@_4};
dfp_read_field_def_message_event_pb(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_message_event_pb(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_message_event_pb(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_event_pb(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
dg_read_field_def_message_event_pb(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_message_event_pb_type(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      16 ->
	  d_field_message_event_pb_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      24 ->
	  d_field_message_event_pb_uncompressed_size(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     TrUserData);
      32 ->
	  d_field_message_event_pb_compressed_size(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_message_event_pb(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_message_event_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    2 ->
		skip_length_delimited_message_event_pb(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    3 ->
		skip_group_message_event_pb(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_message_event_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData)
	  end
    end;
dg_read_field_def_message_event_pb(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #message_event_pb{type = F@_1, id = F@_2,
		      uncompressed_size = F@_3, compressed_size = F@_4}.

d_field_message_event_pb_type(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_message_event_pb_type(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_message_event_pb_type(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(begin
										  <<Res:32/signed-native>> =
										      <<(X
											   bsl
											   N
											   +
											   Acc):32/unsigned-native>>,
										  id(Res,
										     TrUserData)
										end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_message_event_pb(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4,
					TrUserData).

d_field_message_event_pb_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_message_event_pb_id(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_message_event_pb_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event_pb(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, TrUserData).

d_field_message_event_pb_uncompressed_size(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    d_field_message_event_pb_uncompressed_size(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
d_field_message_event_pb_uncompressed_size(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, _, F@_4,
					   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event_pb(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, TrUserData).

d_field_message_event_pb_compressed_size(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    d_field_message_event_pb_compressed_size(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
d_field_message_event_pb_compressed_size(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _,
					 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event_pb(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, TrUserData).

skip_varint_message_event_pb(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_message_event_pb(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
skip_varint_message_event_pb(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event_pb(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_message_event_pb(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_message_event_pb(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
skip_length_delimited_message_event_pb(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_event_pb(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_group_message_event_pb(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_event_pb(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_32_message_event_pb(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event_pb(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_64_message_event_pb(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event_pb(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

decode_msg_annotation_pb(Bin, TrUserData) ->
    dfp_read_field_def_annotation_pb(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_annotation_pb(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_annotation_pb_description(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_annotation_pb(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_annotation_pb_attributes(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_annotation_pb(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #annotation_pb{description = F@_1, attributes = F@_2};
dfp_read_field_def_annotation_pb(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_annotation_pb(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_annotation_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_annotation_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_annotation_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_annotation_pb_description(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_annotation_pb_attributes(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_annotation_pb(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_annotation_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_annotation_pb(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_annotation_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_annotation_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_annotation_pb(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #annotation_pb{description = F@_1, attributes = F@_2}.

d_field_annotation_pb_description(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_annotation_pb_description(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_annotation_pb_description(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_annotation_pb(RestF, 0, 0,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_truncatable_string_pb(Prev,
									    NewFValue,
									    TrUserData)
				     end,
				     F@_2, TrUserData).

d_field_annotation_pb_attributes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_annotation_pb_attributes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_annotation_pb_attributes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_annotation_pb(RestF, 0, 0, F@_1,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_attributes_pb(Prev,
								    NewFValue,
								    TrUserData)
				     end,
				     TrUserData).

skip_varint_annotation_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_annotation_pb(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_annotation_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_annotation_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_annotation_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_annotation_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_annotation_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_annotation_pb(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_annotation_pb(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_annotation_pb(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_annotation_pb(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_annotation_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_annotation_pb(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_annotation_pb(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_time_events_pb(Bin, TrUserData) ->
    dfp_read_field_def_time_events_pb(Bin, 0, 0,
				      id([], TrUserData), id(0, TrUserData),
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_time_events_pb(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_pb_time_event(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_time_events_pb(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_pb_dropped_annotations_count(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
dfp_read_field_def_time_events_pb(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_pb_dropped_message_events_count(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, TrUserData);
dfp_read_field_def_time_events_pb(<<>>, 0, 0, R1, F@_2,
				  F@_3, TrUserData) ->
    #time_events_pb{time_event =
			lists_reverse(R1, TrUserData),
		    dropped_annotations_count = F@_2,
		    dropped_message_events_count = F@_3};
dfp_read_field_def_time_events_pb(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_time_events_pb(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_time_events_pb(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_time_events_pb(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_time_events_pb(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_time_events_pb_time_event(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      16 ->
	  d_field_time_events_pb_dropped_annotations_count(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      24 ->
	  d_field_time_events_pb_dropped_message_events_count(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_time_events_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_time_events_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_time_events_pb(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_time_events_pb(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_time_events_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_time_events_pb(<<>>, 0, 0, R1, F@_2,
				 F@_3, TrUserData) ->
    #time_events_pb{time_event =
			lists_reverse(R1, TrUserData),
		    dropped_annotations_count = F@_2,
		    dropped_message_events_count = F@_3}.

d_field_time_events_pb_time_event(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_time_events_pb_time_event(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_time_events_pb_time_event(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_time_event_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_events_pb(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData), F@_2,
				      F@_3, TrUserData).

d_field_time_events_pb_dropped_annotations_count(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    d_field_time_events_pb_dropped_annotations_count(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
d_field_time_events_pb_dropped_annotations_count(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3,
						 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_time_events_pb(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_time_events_pb_dropped_message_events_count(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    d_field_time_events_pb_dropped_message_events_count(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
d_field_time_events_pb_dropped_message_events_count(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, _,
						    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_time_events_pb(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_time_events_pb(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_time_events_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_time_events_pb(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_time_events_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_time_events_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_time_events_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_time_events_pb(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_time_events_pb(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_time_events_pb(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_time_events_pb(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_time_events_pb(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

decode_msg_link_pb(Bin, TrUserData) ->
    dfp_read_field_def_link_pb(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       id('TYPE_UNSPECIFIED', TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_link_pb(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_pb_trace_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_link_pb(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_pb_span_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_link_pb(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_pb_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_link_pb(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_pb_attributes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_link_pb(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #link_pb{trace_id = F@_1, span_id = F@_2, type = F@_3,
	     attributes = F@_4};
dfp_read_field_def_link_pb(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, TrUserData) ->
    dg_read_field_def_link_pb(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

dg_read_field_def_link_pb(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_link_pb(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_link_pb(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_link_pb_trace_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      18 ->
	  d_field_link_pb_span_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_link_pb_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      34 ->
	  d_field_link_pb_attributes(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_link_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
	    1 ->
		skip_64_link_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData);
	    2 ->
		skip_length_delimited_link_pb(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_link_pb(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
	    5 ->
		skip_32_link_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				TrUserData)
	  end
    end;
dg_read_field_def_link_pb(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #link_pb{trace_id = F@_1, span_id = F@_2, type = F@_3,
	     attributes = F@_4}.

d_field_link_pb_trace_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_pb_trace_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_link_pb_trace_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_link_pb(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, TrUserData).

d_field_link_pb_span_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_pb_span_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_link_pb_span_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_link_pb(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, TrUserData).

d_field_link_pb_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_pb_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_link_pb_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_opencensus.proto.trace.v1.Span.Link.Type'(begin
								<<Res:32/signed-native>> =
								    <<(X bsl N +
									 Acc):32/unsigned-native>>,
								id(Res,
								   TrUserData)
							      end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_link_pb(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, TrUserData).

d_field_link_pb_attributes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_pb_attributes(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_link_pb_attributes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_link_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_attributes_pb(Prev, NewFValue,
							      TrUserData)
			       end,
			       TrUserData).

skip_varint_link_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_link_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData);
skip_varint_link_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_length_delimited_link_pb(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_link_pb(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
skip_length_delimited_link_pb(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_link_pb(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_group_link_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_link_pb(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_32_link_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

skip_64_link_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

decode_msg_links_pb(Bin, TrUserData) ->
    dfp_read_field_def_links_pb(Bin, 0, 0,
				id([], TrUserData), id(0, TrUserData),
				TrUserData).

dfp_read_field_def_links_pb(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_links_pb_link(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_links_pb(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_links_pb_dropped_links_count(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_links_pb(<<>>, 0, 0, R1, F@_2,
			    TrUserData) ->
    #links_pb{link = lists_reverse(R1, TrUserData),
	      dropped_links_count = F@_2};
dfp_read_field_def_links_pb(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_links_pb(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_links_pb(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_links_pb(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_links_pb(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_links_pb_link(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      16 ->
	  d_field_links_pb_dropped_links_count(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_links_pb(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_links_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_links_pb(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_links_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_links_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_links_pb(<<>>, 0, 0, R1, F@_2,
			   TrUserData) ->
    #links_pb{link = lists_reverse(R1, TrUserData),
	      dropped_links_count = F@_2}.

d_field_links_pb_link(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_links_pb_link(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_links_pb_link(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_link_pb(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_links_pb(RestF, 0, 0,
				cons(NewFValue, Prev, TrUserData), F@_2,
				TrUserData).

d_field_links_pb_dropped_links_count(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_links_pb_dropped_links_count(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_links_pb_dropped_links_count(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_links_pb(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_links_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_links_pb(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_links_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_links_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_links_pb(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_links_pb(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_links_pb(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_links_pb(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_links_pb(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_links_pb(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_links_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_links_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_links_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_links_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_span_pb(Bin, TrUserData) ->
    dfp_read_field_def_span_pb(Bin, 0, 0,
			       id(<<>>, TrUserData), id(<<>>, TrUserData),
			       id(undefined, TrUserData), id(<<>>, TrUserData),
			       id(undefined, TrUserData),
			       id('SPAN_KIND_UNSPECIFIED', TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_span_pb(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_trace_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_span_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<122, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_tracestate(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_parent_span_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
dfp_read_field_def_span_pb(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<112, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_kind(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_start_time(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_end_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_attributes(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_stack_trace(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<74, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_time_events(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<82, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_links(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<90, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_status(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<98, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_same_process_as_parent_span(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, F@_8, F@_9,
						F@_10, F@_11, F@_12, F@_13,
						F@_14, F@_15, TrUserData);
dfp_read_field_def_span_pb(<<106, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    d_field_span_pb_child_span_count(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				     F@_15, TrUserData);
dfp_read_field_def_span_pb(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, _) ->
    #span_pb{trace_id = F@_1, span_id = F@_2,
	     tracestate = F@_3, parent_span_id = F@_4, name = F@_5,
	     kind = F@_6, start_time = F@_7, end_time = F@_8,
	     attributes = F@_9, stack_trace = F@_10,
	     time_events = F@_11, links = F@_12, status = F@_13,
	     same_process_as_parent_span = F@_14,
	     child_span_count = F@_15};
dfp_read_field_def_span_pb(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dg_read_field_def_span_pb(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

dg_read_field_def_span_pb(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_span_pb(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      TrUserData);
dg_read_field_def_span_pb(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_span_pb_trace_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
      18 ->
	  d_field_span_pb_span_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15,
				  TrUserData);
      122 ->
	  d_field_span_pb_tracestate(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15,
				     TrUserData);
      26 ->
	  d_field_span_pb_parent_span_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, TrUserData);
      34 ->
	  d_field_span_pb_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, TrUserData);
      112 ->
	  d_field_span_pb_kind(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, TrUserData);
      42 ->
	  d_field_span_pb_start_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15,
				     TrUserData);
      50 ->
	  d_field_span_pb_end_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
      58 ->
	  d_field_span_pb_attributes(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15,
				     TrUserData);
      66 ->
	  d_field_span_pb_stack_trace(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				      TrUserData);
      74 ->
	  d_field_span_pb_time_events(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				      TrUserData);
      82 ->
	  d_field_span_pb_links(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
      90 ->
	  d_field_span_pb_status(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
      98 ->
	  d_field_span_pb_same_process_as_parent_span(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, F@_6, F@_7, F@_8,
						      F@_9, F@_10, F@_11, F@_12,
						      F@_13, F@_14, F@_15,
						      TrUserData);
      106 ->
	  d_field_span_pb_child_span_count(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					   F@_9, F@_10, F@_11, F@_12, F@_13,
					   F@_14, F@_15, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_span_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, F@_14, F@_15, TrUserData);
	    1 ->
		skip_64_span_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, F@_14, F@_15, TrUserData);
	    2 ->
		skip_length_delimited_span_pb(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11, F@_12,
					      F@_13, F@_14, F@_15, TrUserData);
	    3 ->
		skip_group_span_pb(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15,
				   TrUserData);
	    5 ->
		skip_32_span_pb(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, F@_14, F@_15, TrUserData)
	  end
    end;
dg_read_field_def_span_pb(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, _) ->
    #span_pb{trace_id = F@_1, span_id = F@_2,
	     tracestate = F@_3, parent_span_id = F@_4, name = F@_5,
	     kind = F@_6, start_time = F@_7, end_time = F@_8,
	     attributes = F@_9, stack_trace = F@_10,
	     time_events = F@_11, links = F@_12, status = F@_13,
	     same_process_as_parent_span = F@_14,
	     child_span_count = F@_15}.

d_field_span_pb_trace_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData)
    when N < 57 ->
    d_field_span_pb_trace_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     TrUserData);
d_field_span_pb_trace_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_span_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			TrUserData)
    when N < 57 ->
    d_field_span_pb_span_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    TrUserData);
d_field_span_pb_span_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_tracestate(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData)
    when N < 57 ->
    d_field_span_pb_tracestate(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData);
d_field_span_pb_tracestate(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_tracestate_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_tracestate_pb(Prev, NewFValue,
							      TrUserData)
			       end,
			       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_parent_span_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_parent_span_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, TrUserData);
d_field_span_pb_parent_span_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData).

d_field_span_pb_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
d_field_span_pb_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_truncatable_string_pb(Prev,
								      NewFValue,
								      TrUserData)
			       end,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_kind(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_kind(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
d_field_span_pb_kind(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_opencensus.proto.trace.v1.Span.SpanKind'(begin
							       <<Res:32/signed-native>> =
								   <<(X bsl N +
									Acc):32/unsigned-native>>,
							       id(Res,
								  TrUserData)
							     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData).

d_field_span_pb_start_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData)
    when N < 57 ->
    d_field_span_pb_start_time(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData);
d_field_span_pb_start_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_timestamp_pb(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, TrUserData).

d_field_span_pb_end_time(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData)
    when N < 57 ->
    d_field_span_pb_end_time(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     TrUserData);
d_field_span_pb_end_time(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_timestamp_pb(Prev, NewFValue,
							     TrUserData)
			       end,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData).

d_field_span_pb_attributes(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData)
    when N < 57 ->
    d_field_span_pb_attributes(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData);
d_field_span_pb_attributes(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_attributes_pb(Prev, NewFValue,
							      TrUserData)
			       end,
			       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       TrUserData).

d_field_span_pb_stack_trace(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_stack_trace(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				TrUserData);
d_field_span_pb_stack_trace(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_trace_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_stack_trace_pb(Prev, NewFValue,
							       TrUserData)
			       end,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_time_events(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_time_events(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				TrUserData);
d_field_span_pb_time_events(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, Prev, F@_12, F@_13, F@_14, F@_15,
			    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_time_events_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_time_events_pb(Prev, NewFValue,
							       TrUserData)
			       end,
			       F@_12, F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_links(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_links(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData);
d_field_span_pb_links(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, Prev, F@_13, F@_14, F@_15, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_links_pb(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_links_pb(Prev, NewFValue,
							 TrUserData)
			       end,
			       F@_13, F@_14, F@_15, TrUserData).

d_field_span_pb_status(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
		       TrUserData)
    when N < 57 ->
    d_field_span_pb_status(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   TrUserData);
d_field_span_pb_status(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, Prev, F@_14, F@_15,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_status_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_status_pb(Prev, NewFValue,
							  TrUserData)
			       end,
			       F@_14, F@_15, TrUserData).

d_field_span_pb_same_process_as_parent_span(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, F@_14, F@_15,
					    TrUserData)
    when N < 57 ->
    d_field_span_pb_same_process_as_parent_span(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, F@_6, F@_7, F@_8,
						F@_9, F@_10, F@_11, F@_12,
						F@_13, F@_14, F@_15,
						TrUserData);
d_field_span_pb_same_process_as_parent_span(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, Prev, F@_15,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_bool_value_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_bool_value_pb(Prev, NewFValue,
							      TrUserData)
			       end,
			       F@_15, TrUserData).

d_field_span_pb_child_span_count(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 F@_14, F@_15, TrUserData)
    when N < 57 ->
    d_field_span_pb_child_span_count(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, F@_14, F@_15, TrUserData);
d_field_span_pb_child_span_count(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 F@_14, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_u_int_32_value_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span_pb(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_u_int_32_value_pb(Prev,
								  NewFValue,
								  TrUserData)
			       end,
			       TrUserData).

skip_varint_span_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    skip_varint_span_pb(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, TrUserData);
skip_varint_span_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dfp_read_field_def_span_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

skip_length_delimited_span_pb(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData)
    when N < 57 ->
    skip_length_delimited_span_pb(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, TrUserData);
skip_length_delimited_span_pb(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_span_pb(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

skip_group_span_pb(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		   F@_13, F@_14, F@_15, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_span_pb(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

skip_32_span_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dfp_read_field_def_span_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

skip_64_span_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData) ->
    dfp_read_field_def_span_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, TrUserData).

decode_msg_status_pb(Bin, TrUserData) ->
    dfp_read_field_def_status_pb(Bin, 0, 0,
				 id(0, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_status_pb(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_status_pb_code(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_status_pb(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_status_pb_message(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_status_pb(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #status_pb{code = F@_1, message = F@_2};
dfp_read_field_def_status_pb(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_status_pb(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_status_pb(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_status_pb(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_status_pb(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_status_pb_code(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      18 ->
	  d_field_status_pb_message(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_status_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_status_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_status_pb(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_status_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_status_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_status_pb(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #status_pb{code = F@_1, message = F@_2}.

d_field_status_pb_code(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_status_pb_code(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_status_pb_code(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_status_pb(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_status_pb_message(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_status_pb_message(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_status_pb_message(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_status_pb(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_status_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_status_pb(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_status_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_status_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_status_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_status_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_status_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_status_pb(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_status_pb(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_status_pb(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_status_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_status_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_status_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_status_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_attribute_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_attribute_value_pb(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_pb_string_value(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_attribute_value_pb(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_pb_int_value(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_attribute_value_pb(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_pb_bool_value(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_attribute_value_pb(<<33,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_pb_double_value(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_attribute_value_pb(<<>>, 0, 0, F@_1,
				      _) ->
    #attribute_value_pb{value = F@_1};
dfp_read_field_def_attribute_value_pb(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_attribute_value_pb(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_attribute_value_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_attribute_value_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_attribute_value_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_attribute_value_pb_string_value(Rest, 0, 0,
						  F@_1, TrUserData);
      16 ->
	  d_field_attribute_value_pb_int_value(Rest, 0, 0, F@_1,
					       TrUserData);
      24 ->
	  d_field_attribute_value_pb_bool_value(Rest, 0, 0, F@_1,
						TrUserData);
      33 ->
	  d_field_attribute_value_pb_double_value(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_attribute_value_pb(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_attribute_value_pb(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_attribute_value_pb(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_attribute_value_pb(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_attribute_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_attribute_value_pb(<<>>, 0, 0, F@_1,
				     _) ->
    #attribute_value_pb{value = F@_1}.

d_field_attribute_value_pb_string_value(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_pb_string_value(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_pb_string_value(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_attribute_value_pb(RestF, 0, 0,
					  case Prev of
					    undefined ->
						id({string_value, NewFValue},
						   TrUserData);
					    {string_value, MVPrev} ->
						id({string_value,
						    merge_msg_truncatable_string_pb(MVPrev,
										    NewFValue,
										    TrUserData)},
						   TrUserData);
					    _ ->
						id({string_value, NewFValue},
						   TrUserData)
					  end,
					  TrUserData).

d_field_attribute_value_pb_int_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_pb_int_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_pb_int_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_attribute_value_pb(RestF, 0, 0,
					  id({int_value, NewFValue},
					     TrUserData),
					  TrUserData).

d_field_attribute_value_pb_bool_value(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_pb_bool_value(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_pb_bool_value(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_attribute_value_pb(RestF, 0, 0,
					  id({bool_value, NewFValue},
					     TrUserData),
					  TrUserData).

d_field_attribute_value_pb_double_value(<<0:48, 240,
					  127, Rest/binary>>,
					Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  id({double_value,
					      id(infinity, TrUserData)},
					     TrUserData),
					  TrUserData);
d_field_attribute_value_pb_double_value(<<0:48, 240,
					  255, Rest/binary>>,
					Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  id({double_value,
					      id('-infinity', TrUserData)},
					     TrUserData),
					  TrUserData);
d_field_attribute_value_pb_double_value(<<_:48, 15:4,
					  _:4, _:1, 127:7, Rest/binary>>,
					Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  id({double_value,
					      id(nan, TrUserData)},
					     TrUserData),
					  TrUserData);
d_field_attribute_value_pb_double_value(<<Value:64/little-float,
					  Rest/binary>>,
					Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  id({double_value,
					      id(Value, TrUserData)},
					     TrUserData),
					  TrUserData).

skip_varint_attribute_value_pb(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_attribute_value_pb(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_attribute_value_pb(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_attribute_value_pb(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_attribute_value_pb(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_attribute_value_pb(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_attribute_value_pb(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_attribute_value_pb(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_attribute_value_pb(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_attribute_value_pb(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_attribute_value_pb(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value_pb(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_stack_frame_pb(Bin, TrUserData) ->
    dfp_read_field_def_stack_frame_pb(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(0, TrUserData), id(0, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_stack_frame_pb(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_function_name(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_stack_frame_pb(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_original_function_name(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_stack_frame_pb(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_file_name(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData);
dfp_read_field_def_stack_frame_pb(<<32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_line_number(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_stack_frame_pb(<<40, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_column_number(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_stack_frame_pb(<<50, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_load_module(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_stack_frame_pb(<<58, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    d_field_stack_frame_pb_source_version(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData);
dfp_read_field_def_stack_frame_pb(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #stack_frame_pb{function_name = F@_1,
		    original_function_name = F@_2, file_name = F@_3,
		    line_number = F@_4, column_number = F@_5,
		    load_module = F@_6, source_version = F@_7};
dfp_read_field_def_stack_frame_pb(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				  TrUserData) ->
    dg_read_field_def_stack_frame_pb(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData).

dg_read_field_def_stack_frame_pb(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_frame_pb(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_stack_frame_pb(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_frame_pb_function_name(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      18 ->
	  d_field_stack_frame_pb_original_function_name(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, F@_6, F@_7,
							TrUserData);
      26 ->
	  d_field_stack_frame_pb_file_name(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7,
					   TrUserData);
      32 ->
	  d_field_stack_frame_pb_line_number(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      40 ->
	  d_field_stack_frame_pb_column_number(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      50 ->
	  d_field_stack_frame_pb_load_module(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      58 ->
	  d_field_stack_frame_pb_source_version(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_frame_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_stack_frame_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_stack_frame_pb(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     F@_6, F@_7, TrUserData);
	    3 ->
		skip_group_stack_frame_pb(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
	    5 ->
		skip_32_stack_frame_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_stack_frame_pb(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #stack_frame_pb{function_name = F@_1,
		    original_function_name = F@_2, file_name = F@_3,
		    line_number = F@_4, column_number = F@_5,
		    load_module = F@_6, source_version = F@_7}.

d_field_stack_frame_pb_function_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_function_name(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_function_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_truncatable_string_pb(Prev,
									     NewFValue,
									     TrUserData)
				      end,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

d_field_stack_frame_pb_original_function_name(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_original_function_name(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
d_field_stack_frame_pb_original_function_name(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, Prev, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_truncatable_string_pb(Prev,
									     NewFValue,
									     TrUserData)
				      end,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_stack_frame_pb_file_name(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_file_name(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_file_name(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6,
				 F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      F@_2,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_truncatable_string_pb(Prev,
									     NewFValue,
									     TrUserData)
				      end,
				      F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_stack_frame_pb_line_number(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_line_number(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_line_number(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				   F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				      TrUserData).

d_field_stack_frame_pb_column_number(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_column_number(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_column_number(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				     F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, NewFValue, F@_6, F@_7,
				      TrUserData).

d_field_stack_frame_pb_load_module(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_load_module(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_load_module(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
				   F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_module_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_module_pb(Prev,
								 NewFValue,
								 TrUserData)
				      end,
				      F@_7, TrUserData).

d_field_stack_frame_pb_source_version(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_pb_source_version(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_pb_source_version(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame_pb(RestF, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_truncatable_string_pb(Prev,
									     NewFValue,
									     TrUserData)
				      end,
				      TrUserData).

skip_varint_stack_frame_pb(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    skip_varint_stack_frame_pb(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_stack_frame_pb(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    dfp_read_field_def_stack_frame_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

skip_length_delimited_stack_frame_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_frame_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_stack_frame_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_frame_pb(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

skip_group_stack_frame_pb(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_frame_pb(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

skip_32_stack_frame_pb(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_stack_frame_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

skip_64_stack_frame_pb(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_stack_frame_pb(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData).

decode_msg_stack_frames_pb(Bin, TrUserData) ->
    dfp_read_field_def_stack_frames_pb(Bin, 0, 0,
				       id([], TrUserData), id(0, TrUserData),
				       TrUserData).

dfp_read_field_def_stack_frames_pb(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_frames_pb_frame(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_stack_frames_pb(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_frames_pb_dropped_frames_count(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_stack_frames_pb(<<>>, 0, 0, R1, F@_2,
				   TrUserData) ->
    #stack_frames_pb{frame = lists_reverse(R1, TrUserData),
		     dropped_frames_count = F@_2};
dfp_read_field_def_stack_frames_pb(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_stack_frames_pb(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_stack_frames_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_frames_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_stack_frames_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_frames_pb_frame(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      16 ->
	  d_field_stack_frames_pb_dropped_frames_count(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_frames_pb(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_stack_frames_pb(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_stack_frames_pb(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_stack_frames_pb(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_stack_frames_pb(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_stack_frames_pb(<<>>, 0, 0, R1, F@_2,
				  TrUserData) ->
    #stack_frames_pb{frame = lists_reverse(R1, TrUserData),
		     dropped_frames_count = F@_2}.

d_field_stack_frames_pb_frame(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_frames_pb_frame(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_stack_frames_pb_frame(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_frame_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frames_pb(RestF, 0, 0,
				       cons(NewFValue, Prev, TrUserData), F@_2,
				       TrUserData).

d_field_stack_frames_pb_dropped_frames_count(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_frames_pb_dropped_frames_count(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_stack_frames_pb_dropped_frames_count(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frames_pb(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_stack_frames_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_stack_frames_pb(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_stack_frames_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames_pb(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_stack_frames_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_frames_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_stack_frames_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_frames_pb(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_stack_frames_pb(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_frames_pb(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_stack_frames_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames_pb(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_stack_frames_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames_pb(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_stack_trace_pb(Bin, TrUserData) ->
    dfp_read_field_def_stack_trace_pb(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_stack_trace_pb(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_trace_pb_stack_frames(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_stack_trace_pb(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_trace_pb_stack_trace_hash_id(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_stack_trace_pb(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #stack_trace_pb{stack_frames = F@_1,
		    stack_trace_hash_id = F@_2};
dfp_read_field_def_stack_trace_pb(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_stack_trace_pb(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_stack_trace_pb(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_trace_pb(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_stack_trace_pb(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_trace_pb_stack_frames(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_stack_trace_pb_stack_trace_hash_id(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_trace_pb(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_stack_trace_pb(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_stack_trace_pb(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_stack_trace_pb(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_stack_trace_pb(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_stack_trace_pb(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #stack_trace_pb{stack_frames = F@_1,
		    stack_trace_hash_id = F@_2}.

d_field_stack_trace_pb_stack_frames(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_trace_pb_stack_frames(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_stack_trace_pb_stack_frames(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_frames_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_trace_pb(RestF, 0, 0,
				      if Prev == undefined -> NewFValue;
					 true ->
					     merge_msg_stack_frames_pb(Prev,
								       NewFValue,
								       TrUserData)
				      end,
				      F@_2, TrUserData).

d_field_stack_trace_pb_stack_trace_hash_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_trace_pb_stack_trace_hash_id(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_stack_trace_pb_stack_trace_hash_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_stack_trace_pb(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_stack_trace_pb(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_stack_trace_pb(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_stack_trace_pb(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace_pb(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_stack_trace_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_trace_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_stack_trace_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_trace_pb(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_stack_trace_pb(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_trace_pb(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_stack_trace_pb(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace_pb(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_stack_trace_pb(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace_pb(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_module_pb(Bin, TrUserData) ->
    dfp_read_field_def_module_pb(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_module_pb(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_module_pb_module(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
dfp_read_field_def_module_pb(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_module_pb_build_id(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_module_pb(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #module_pb{module = F@_1, build_id = F@_2};
dfp_read_field_def_module_pb(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_module_pb(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_module_pb(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_module_pb(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_module_pb(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_module_pb_module(Rest, 0, 0, F@_1, F@_2,
				   TrUserData);
      18 ->
	  d_field_module_pb_build_id(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_module_pb(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_module_pb(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_module_pb(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_module_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_module_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_module_pb(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #module_pb{module = F@_1, build_id = F@_2}.

d_field_module_pb_module(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_module_pb_module(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
d_field_module_pb_module(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_module_pb(RestF, 0, 0,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_truncatable_string_pb(Prev,
									NewFValue,
									TrUserData)
				 end,
				 F@_2, TrUserData).

d_field_module_pb_build_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_module_pb_build_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_module_pb_build_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_module_pb(RestF, 0, 0, F@_1,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_truncatable_string_pb(Prev,
									NewFValue,
									TrUserData)
				 end,
				 TrUserData).

skip_varint_module_pb(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_module_pb(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_module_pb(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_module_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_module_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_module_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_module_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_module_pb(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_module_pb(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_module_pb(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_module_pb(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_module_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_module_pb(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_module_pb(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_truncatable_string_pb(Bin, TrUserData) ->
    dfp_read_field_def_truncatable_string_pb(Bin, 0, 0,
					     id(<<>>, TrUserData),
					     id(0, TrUserData), TrUserData).

dfp_read_field_def_truncatable_string_pb(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_truncatable_string_pb_value(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_truncatable_string_pb(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_truncatable_string_pb_truncated_byte_count(Rest,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData);
dfp_read_field_def_truncatable_string_pb(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #truncatable_string_pb{value = F@_1,
			   truncated_byte_count = F@_2};
dfp_read_field_def_truncatable_string_pb(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData) ->
    dg_read_field_def_truncatable_string_pb(Other, Z1, Z2,
					    F@_1, F@_2, TrUserData).

dg_read_field_def_truncatable_string_pb(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_truncatable_string_pb(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
dg_read_field_def_truncatable_string_pb(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_truncatable_string_pb_value(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_truncatable_string_pb_truncated_byte_count(Rest,
							     0, 0, F@_1, F@_2,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_truncatable_string_pb(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    1 ->
		skip_64_truncatable_string_pb(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    2 ->
		skip_length_delimited_truncatable_string_pb(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    3 ->
		skip_group_truncatable_string_pb(Rest, Key bsr 3, 0,
						 F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_truncatable_string_pb(Rest, 0, 0, F@_1, F@_2,
					      TrUserData)
	  end
    end;
dg_read_field_def_truncatable_string_pb(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #truncatable_string_pb{value = F@_1,
			   truncated_byte_count = F@_2}.

d_field_truncatable_string_pb_value(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_truncatable_string_pb_value(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_truncatable_string_pb_value(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_truncatable_string_pb(RestF, 0, 0,
					     NewFValue, F@_2, TrUserData).

d_field_truncatable_string_pb_truncated_byte_count(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    d_field_truncatable_string_pb_truncated_byte_count(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
d_field_truncatable_string_pb_truncated_byte_count(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, _,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_truncatable_string_pb(RestF, 0, 0,
					     F@_1, NewFValue, TrUserData).

skip_varint_truncatable_string_pb(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_truncatable_string_pb(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
skip_varint_truncatable_string_pb(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string_pb(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_length_delimited_truncatable_string_pb(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_truncatable_string_pb(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
skip_length_delimited_truncatable_string_pb(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_truncatable_string_pb(Rest2, 0, 0,
					     F@_1, F@_2, TrUserData).

skip_group_truncatable_string_pb(Bin, FNum, Z2, F@_1,
				 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_truncatable_string_pb(Rest, 0, Z2,
					     F@_1, F@_2, TrUserData).

skip_32_truncatable_string_pb(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string_pb(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_64_truncatable_string_pb(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string_pb(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

decode_msg_timestamp_pb(Bin, TrUserData) ->
    dfp_read_field_def_timestamp_pb(Bin, 0, 0,
				    id(0, TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_timestamp_pb(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_pb_seconds(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_timestamp_pb(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_pb_nanos(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_timestamp_pb(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    #timestamp_pb{seconds = F@_1, nanos = F@_2};
dfp_read_field_def_timestamp_pb(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_timestamp_pb(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_timestamp_pb(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp_pb(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp_pb(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_pb_seconds(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_timestamp_pb_nanos(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp_pb(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_timestamp_pb(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_timestamp_pb(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_timestamp_pb(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_timestamp_pb(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp_pb(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #timestamp_pb{seconds = F@_1, nanos = F@_2}.

d_field_timestamp_pb_seconds(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_pb_seconds(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_timestamp_pb_seconds(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp_pb(RestF, 0, 0, NewFValue,
				    F@_2, TrUserData).

d_field_timestamp_pb_nanos(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_pb_nanos(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_timestamp_pb_nanos(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp_pb(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_timestamp_pb(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp_pb(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_timestamp_pb(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp_pb(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_timestamp_pb(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp_pb(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp_pb(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp_pb(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_timestamp_pb(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp_pb(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_timestamp_pb(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp_pb(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_timestamp_pb(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp_pb(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_double_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_double_value_pb(Bin, 0, 0,
				       id(0.0, TrUserData), TrUserData).

dfp_read_field_def_double_value_pb(<<9, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_double_value_pb_value(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_double_value_pb(<<>>, 0, 0, F@_1,
				   _) ->
    #double_value_pb{value = F@_1};
dfp_read_field_def_double_value_pb(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_double_value_pb(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_double_value_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_double_value_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_double_value_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_double_value_pb_value(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_double_value_pb(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_double_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_double_value_pb(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_double_value_pb(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_double_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_double_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #double_value_pb{value = F@_1}.

d_field_double_value_pb_value(<<0:48, 240, 127,
				Rest/binary>>,
			      Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2,
				       id(infinity, TrUserData), TrUserData);
d_field_double_value_pb_value(<<0:48, 240, 255,
				Rest/binary>>,
			      Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2,
				       id('-infinity', TrUserData), TrUserData);
d_field_double_value_pb_value(<<_:48, 15:4, _:4, _:1,
				127:7, Rest/binary>>,
			      Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2,
				       id(nan, TrUserData), TrUserData);
d_field_double_value_pb_value(<<Value:64/little-float,
				Rest/binary>>,
			      Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2,
				       id(Value, TrUserData), TrUserData).

skip_varint_double_value_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_double_value_pb(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_double_value_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_double_value_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_double_value_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_double_value_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_double_value_pb(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_double_value_pb(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_double_value_pb(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_double_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_double_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_double_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_float_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_float_value_pb(Bin, 0, 0,
				      id(0.0, TrUserData), TrUserData).

dfp_read_field_def_float_value_pb(<<13, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_float_value_pb_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_float_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #float_value_pb{value = F@_1};
dfp_read_field_def_float_value_pb(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_float_value_pb(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_float_value_pb(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_float_value_pb(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_float_value_pb(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_float_value_pb_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_float_value_pb(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_float_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_float_value_pb(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_float_value_pb(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_float_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_float_value_pb(<<>>, 0, 0, F@_1, _) ->
    #float_value_pb{value = F@_1}.

d_field_float_value_pb_value(<<0:16, 128, 127,
			       Rest/binary>>,
			     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2,
				      id(infinity, TrUserData), TrUserData);
d_field_float_value_pb_value(<<0:16, 128, 255,
			       Rest/binary>>,
			     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2,
				      id('-infinity', TrUserData), TrUserData);
d_field_float_value_pb_value(<<_:16, 1:1, _:7, _:1,
			       127:7, Rest/binary>>,
			     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2,
				      id(nan, TrUserData), TrUserData);
d_field_float_value_pb_value(<<Value:32/little-float,
			       Rest/binary>>,
			     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2,
				      id(Value, TrUserData), TrUserData).

skip_varint_float_value_pb(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_float_value_pb(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_float_value_pb(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_float_value_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_float_value_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_float_value_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_float_value_pb(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_float_value_pb(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_float_value_pb(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_float_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_float_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_float_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_int_64_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_int_64_value_pb(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_int_64_value_pb(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_int_64_value_pb_value(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_int_64_value_pb(<<>>, 0, 0, F@_1,
				   _) ->
    #int_64_value_pb{value = F@_1};
dfp_read_field_def_int_64_value_pb(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_int_64_value_pb(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_int_64_value_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_64_value_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_64_value_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_64_value_pb_value(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_64_value_pb(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_int_64_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_64_value_pb(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_int_64_value_pb(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_int_64_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_64_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #int_64_value_pb{value = F@_1}.

d_field_int_64_value_pb_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_64_value_pb_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_int_64_value_pb_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_64_value_pb(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_int_64_value_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_int_64_value_pb(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_int_64_value_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_int_64_value_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_64_value_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_64_value_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_64_value_pb(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_int_64_value_pb(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_64_value_pb(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_int_64_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_int_64_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_u_int_64_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_u_int_64_value_pb(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_64_value_pb(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_64_value_pb_value(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_u_int_64_value_pb(<<>>, 0, 0, F@_1,
				     _) ->
    #u_int_64_value_pb{value = F@_1};
dfp_read_field_def_u_int_64_value_pb(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_u_int_64_value_pb(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_u_int_64_value_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_64_value_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_64_value_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_64_value_pb_value(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_64_value_pb(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_u_int_64_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_64_value_pb(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_u_int_64_value_pb(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_u_int_64_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_64_value_pb(<<>>, 0, 0, F@_1,
				    _) ->
    #u_int_64_value_pb{value = F@_1}.

d_field_u_int_64_value_pb_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_64_value_pb_value(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_u_int_64_value_pb_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_64_value_pb(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_u_int_64_value_pb(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_64_value_pb(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_u_int_64_value_pb(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_u_int_64_value_pb(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_64_value_pb(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_64_value_pb(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_64_value_pb(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_u_int_64_value_pb(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_64_value_pb(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_u_int_64_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_u_int_64_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_int_32_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_int_32_value_pb(Bin, 0, 0,
				       id(0, TrUserData), TrUserData).

dfp_read_field_def_int_32_value_pb(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_int_32_value_pb_value(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_int_32_value_pb(<<>>, 0, 0, F@_1,
				   _) ->
    #int_32_value_pb{value = F@_1};
dfp_read_field_def_int_32_value_pb(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_int_32_value_pb(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_int_32_value_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_32_value_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_32_value_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_32_value_pb_value(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_32_value_pb(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_int_32_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_32_value_pb(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_int_32_value_pb(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_int_32_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_32_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #int_32_value_pb{value = F@_1}.

d_field_int_32_value_pb_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_32_value_pb_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_int_32_value_pb_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_32_value_pb(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_int_32_value_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_int_32_value_pb(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_int_32_value_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_int_32_value_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_32_value_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_32_value_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_32_value_pb(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_int_32_value_pb(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_32_value_pb(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_int_32_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_int_32_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_u_int_32_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_u_int_32_value_pb(Bin, 0, 0,
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_32_value_pb(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_32_value_pb_value(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_u_int_32_value_pb(<<>>, 0, 0, F@_1,
				     _) ->
    #u_int_32_value_pb{value = F@_1};
dfp_read_field_def_u_int_32_value_pb(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_u_int_32_value_pb(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_u_int_32_value_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_32_value_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_32_value_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_32_value_pb_value(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_32_value_pb(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_u_int_32_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_32_value_pb(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_u_int_32_value_pb(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_u_int_32_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_32_value_pb(<<>>, 0, 0, F@_1,
				    _) ->
    #u_int_32_value_pb{value = F@_1}.

d_field_u_int_32_value_pb_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_32_value_pb_value(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_u_int_32_value_pb_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_32_value_pb(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_u_int_32_value_pb(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_32_value_pb(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_u_int_32_value_pb(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_u_int_32_value_pb(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_32_value_pb(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_32_value_pb(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_32_value_pb(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_u_int_32_value_pb(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_32_value_pb(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_u_int_32_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_u_int_32_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value_pb(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_bool_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_bool_value_pb(Bin, 0, 0,
				     id(false, TrUserData), TrUserData).

dfp_read_field_def_bool_value_pb(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, TrUserData) ->
    d_field_bool_value_pb_value(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_bool_value_pb(<<>>, 0, 0, F@_1, _) ->
    #bool_value_pb{value = F@_1};
dfp_read_field_def_bool_value_pb(Other, Z1, Z2, F@_1,
				 TrUserData) ->
    dg_read_field_def_bool_value_pb(Other, Z1, Z2, F@_1,
				    TrUserData).

dg_read_field_def_bool_value_pb(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bool_value_pb(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bool_value_pb(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_bool_value_pb_value(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bool_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    1 ->
		skip_64_bool_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bool_value_pb(Rest, 0, 0, F@_1,
						    TrUserData);
	    3 ->
		skip_group_bool_value_pb(Rest, Key bsr 3, 0, F@_1,
					 TrUserData);
	    5 -> skip_32_bool_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bool_value_pb(<<>>, 0, 0, F@_1, _) ->
    #bool_value_pb{value = F@_1}.

d_field_bool_value_pb_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bool_value_pb_value(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_bool_value_pb_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_bool_value_pb(RestF, 0, 0, NewFValue,
				     TrUserData).

skip_varint_bool_value_pb(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    skip_varint_bool_value_pb(Rest, Z1, Z2, F@_1,
			      TrUserData);
skip_varint_bool_value_pb(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bool_value_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_length_delimited_bool_value_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bool_value_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bool_value_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bool_value_pb(Rest2, 0, 0, F@_1,
				     TrUserData).

skip_group_bool_value_pb(Bin, FNum, Z2, F@_1,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bool_value_pb(Rest, 0, Z2, F@_1,
				     TrUserData).

skip_32_bool_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_bool_value_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

skip_64_bool_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_bool_value_pb(Rest, Z1, Z2, F@_1,
				     TrUserData).

decode_msg_string_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_string_value_pb(Bin, 0, 0,
				       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_string_value_pb(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_string_value_pb_value(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_string_value_pb(<<>>, 0, 0, F@_1,
				   _) ->
    #string_value_pb{value = F@_1};
dfp_read_field_def_string_value_pb(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_string_value_pb(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_string_value_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_string_value_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_string_value_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_string_value_pb_value(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_string_value_pb(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_string_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_string_value_pb(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_string_value_pb(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_string_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_string_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #string_value_pb{value = F@_1}.

d_field_string_value_pb_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_string_value_pb_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_string_value_pb_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_string_value_pb(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_string_value_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_string_value_pb(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_string_value_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_string_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_string_value_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_string_value_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_string_value_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_string_value_pb(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_string_value_pb(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_string_value_pb(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_string_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_string_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_string_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_string_value_pb(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_bytes_value_pb(Bin, TrUserData) ->
    dfp_read_field_def_bytes_value_pb(Bin, 0, 0,
				      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_bytes_value_pb(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_bytes_value_pb_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_bytes_value_pb(<<>>, 0, 0, F@_1,
				  _) ->
    #bytes_value_pb{value = F@_1};
dfp_read_field_def_bytes_value_pb(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_bytes_value_pb(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_bytes_value_pb(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bytes_value_pb(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bytes_value_pb(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_bytes_value_pb_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bytes_value_pb(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_bytes_value_pb(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bytes_value_pb(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_bytes_value_pb(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_bytes_value_pb(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bytes_value_pb(<<>>, 0, 0, F@_1, _) ->
    #bytes_value_pb{value = F@_1}.

d_field_bytes_value_pb_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bytes_value_pb_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_bytes_value_pb_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_bytes_value_pb(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_bytes_value_pb(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_bytes_value_pb(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_bytes_value_pb(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_bytes_value_pb(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bytes_value_pb(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bytes_value_pb(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bytes_value_pb(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_bytes_value_pb(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bytes_value_pb(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_bytes_value_pb(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_bytes_value_pb(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value_pb(Rest, Z1, Z2, F@_1,
				      TrUserData).

'decode_msg_map<string,attribute_value_pb>'(Bin,
					    TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value_pb>'(Bin,
							0, 0,
							id(<<>>, TrUserData),
							id('$undef',
							   TrUserData),
							TrUserData).

'dfp_read_field_def_map<string,attribute_value_pb>'(<<10,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_map<string,attribute_value_pb>_key'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,attribute_value_pb>'(<<18,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'd_field_map<string,attribute_value_pb>_value'(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,attribute_value_pb>'(<<>>,
						    0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,attribute_value_pb>'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData) ->
    'dg_read_field_def_map<string,attribute_value_pb>'(Other,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData).

'dg_read_field_def_map<string,attribute_value_pb>'(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,attribute_value_pb>'(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
'dg_read_field_def_map<string,attribute_value_pb>'(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,attribute_value_pb>_key'(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_map<string,attribute_value_pb>_value'(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,attribute_value_pb>'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    1 ->
		'skip_64_map<string,attribute_value_pb>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    2 ->
		'skip_length_delimited_map<string,attribute_value_pb>'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    3 ->
		'skip_group_map<string,attribute_value_pb>'(Rest,
							    Key bsr 3, 0, F@_1,
							    F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,attribute_value_pb>'(Rest, 0, 0,
							 F@_1, F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_map<string,attribute_value_pb>'(<<>>,
						   0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,attribute_value_pb>_key'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,attribute_value_pb>_key'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'd_field_map<string,attribute_value_pb>_key'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,attribute_value_pb>'(RestF,
							0, 0, NewFValue, F@_2,
							TrUserData).

'd_field_map<string,attribute_value_pb>_value'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,attribute_value_pb>_value'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
'd_field_map<string,attribute_value_pb>_value'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, Prev,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attribute_value_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,attribute_value_pb>'(RestF,
							0, 0, F@_1,
							if Prev == '$undef' ->
							       NewFValue;
							   true ->
							       merge_msg_attribute_value_pb(Prev,
											    NewFValue,
											    TrUserData)
							end,
							TrUserData).

'skip_varint_map<string,attribute_value_pb>'(<<1:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,attribute_value_pb>'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'skip_varint_map<string,attribute_value_pb>'(<<0:1, _:7,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value_pb>'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_length_delimited_map<string,attribute_value_pb>'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,attribute_value_pb>'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'skip_length_delimited_map<string,attribute_value_pb>'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,attribute_value_pb>'(Rest2,
							0, 0, F@_1, F@_2,
							TrUserData).

'skip_group_map<string,attribute_value_pb>'(Bin, FNum,
					    Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,attribute_value_pb>'(Rest,
							0, Z2, F@_1, F@_2,
							TrUserData).

'skip_32_map<string,attribute_value_pb>'(<<_:32,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value_pb>'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'skip_64_map<string,attribute_value_pb>'(<<_:64,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value_pb>'(Rest,
							Z1, Z2, F@_1, F@_2,
							TrUserData).

'd_enum_opencensus.proto.trace.v1.Span.SpanKind'(0) ->
    'SPAN_KIND_UNSPECIFIED';
'd_enum_opencensus.proto.trace.v1.Span.SpanKind'(1) ->
    'SERVER';
'd_enum_opencensus.proto.trace.v1.Span.SpanKind'(2) ->
    'CLIENT';
'd_enum_opencensus.proto.trace.v1.Span.SpanKind'(V) ->
    V.

'd_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(0) ->
    'TYPE_UNSPECIFIED';
'd_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(1) ->
    'SENT';
'd_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(2) ->
    'RECEIVED';
'd_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(V) ->
    V.

'd_enum_opencensus.proto.trace.v1.Span.Link.Type'(0) ->
    'TYPE_UNSPECIFIED';
'd_enum_opencensus.proto.trace.v1.Span.Link.Type'(1) ->
    'CHILD_LINKED_SPAN';
'd_enum_opencensus.proto.trace.v1.Span.Link.Type'(2) ->
    'PARENT_LINKED_SPAN';
'd_enum_opencensus.proto.trace.v1.Span.Link.Type'(V) ->
    V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      tracestate_pb ->
	  merge_msg_tracestate_pb(Prev, New, TrUserData);
      entry_pb -> merge_msg_entry_pb(Prev, New, TrUserData);
      attributes_pb ->
	  merge_msg_attributes_pb(Prev, New, TrUserData);
      time_event_pb ->
	  merge_msg_time_event_pb(Prev, New, TrUserData);
      message_event_pb ->
	  merge_msg_message_event_pb(Prev, New, TrUserData);
      annotation_pb ->
	  merge_msg_annotation_pb(Prev, New, TrUserData);
      time_events_pb ->
	  merge_msg_time_events_pb(Prev, New, TrUserData);
      link_pb -> merge_msg_link_pb(Prev, New, TrUserData);
      links_pb -> merge_msg_links_pb(Prev, New, TrUserData);
      span_pb -> merge_msg_span_pb(Prev, New, TrUserData);
      status_pb -> merge_msg_status_pb(Prev, New, TrUserData);
      attribute_value_pb ->
	  merge_msg_attribute_value_pb(Prev, New, TrUserData);
      stack_frame_pb ->
	  merge_msg_stack_frame_pb(Prev, New, TrUserData);
      stack_frames_pb ->
	  merge_msg_stack_frames_pb(Prev, New, TrUserData);
      stack_trace_pb ->
	  merge_msg_stack_trace_pb(Prev, New, TrUserData);
      module_pb -> merge_msg_module_pb(Prev, New, TrUserData);
      truncatable_string_pb ->
	  merge_msg_truncatable_string_pb(Prev, New, TrUserData);
      timestamp_pb ->
	  merge_msg_timestamp_pb(Prev, New, TrUserData);
      double_value_pb ->
	  merge_msg_double_value_pb(Prev, New, TrUserData);
      float_value_pb ->
	  merge_msg_float_value_pb(Prev, New, TrUserData);
      int_64_value_pb ->
	  merge_msg_int_64_value_pb(Prev, New, TrUserData);
      u_int_64_value_pb ->
	  merge_msg_u_int_64_value_pb(Prev, New, TrUserData);
      int_32_value_pb ->
	  merge_msg_int_32_value_pb(Prev, New, TrUserData);
      u_int_32_value_pb ->
	  merge_msg_u_int_32_value_pb(Prev, New, TrUserData);
      bool_value_pb ->
	  merge_msg_bool_value_pb(Prev, New, TrUserData);
      string_value_pb ->
	  merge_msg_string_value_pb(Prev, New, TrUserData);
      bytes_value_pb ->
	  merge_msg_bytes_value_pb(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_tracestate_pb/3}).
merge_msg_tracestate_pb(#tracestate_pb{entries =
					   PFentries},
			#tracestate_pb{entries = NFentries}, TrUserData) ->
    #tracestate_pb{entries =
		       if PFentries /= undefined, NFentries /= undefined ->
			      'erlang_++'(PFentries, NFentries, TrUserData);
			  PFentries == undefined -> NFentries;
			  NFentries == undefined -> PFentries
		       end}.

-compile({nowarn_unused_function,merge_msg_entry_pb/3}).
merge_msg_entry_pb(#entry_pb{key = PFkey,
			     value = PFvalue},
		   #entry_pb{key = NFkey, value = NFvalue}, _) ->
    #entry_pb{key =
		  if NFkey =:= undefined -> PFkey;
		     true -> NFkey
		  end,
	      value =
		  if NFvalue =:= undefined -> PFvalue;
		     true -> NFvalue
		  end}.

-compile({nowarn_unused_function,merge_msg_attributes_pb/3}).
merge_msg_attributes_pb(#attributes_pb{attribute_map =
					   PFattribute_map,
				       dropped_attributes_count =
					   PFdropped_attributes_count},
			#attributes_pb{attribute_map = NFattribute_map,
				       dropped_attributes_count =
					   NFdropped_attributes_count},
			TrUserData) ->
    #attributes_pb{attribute_map =
		       if PFattribute_map /= undefined,
			  NFattribute_map /= undefined ->
			      'tr_merge_attributes_pb.attribute_map'(PFattribute_map,
								     NFattribute_map,
								     TrUserData);
			  PFattribute_map == undefined -> NFattribute_map;
			  NFattribute_map == undefined -> PFattribute_map
		       end,
		   dropped_attributes_count =
		       if NFdropped_attributes_count =:= undefined ->
			      PFdropped_attributes_count;
			  true -> NFdropped_attributes_count
		       end}.

-compile({nowarn_unused_function,merge_msg_time_event_pb/3}).
merge_msg_time_event_pb(#time_event_pb{time = PFtime,
				       value = PFvalue},
			#time_event_pb{time = NFtime, value = NFvalue},
			TrUserData) ->
    #time_event_pb{time =
		       if PFtime /= undefined, NFtime /= undefined ->
			      merge_msg_timestamp_pb(PFtime, NFtime,
						     TrUserData);
			  PFtime == undefined -> NFtime;
			  NFtime == undefined -> PFtime
		       end,
		   value =
		       case {PFvalue, NFvalue} of
			 {{annotation, OPFvalue}, {annotation, ONFvalue}} ->
			     {annotation,
			      merge_msg_annotation_pb(OPFvalue, ONFvalue,
						      TrUserData)};
			 {{message_event, OPFvalue},
			  {message_event, ONFvalue}} ->
			     {message_event,
			      merge_msg_message_event_pb(OPFvalue, ONFvalue,
							 TrUserData)};
			 {_, undefined} -> PFvalue;
			 _ -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_message_event_pb/3}).
merge_msg_message_event_pb(#message_event_pb{type =
						 PFtype,
					     id = PFid,
					     uncompressed_size =
						 PFuncompressed_size,
					     compressed_size =
						 PFcompressed_size},
			   #message_event_pb{type = NFtype, id = NFid,
					     uncompressed_size =
						 NFuncompressed_size,
					     compressed_size =
						 NFcompressed_size},
			   _) ->
    #message_event_pb{type =
			  if NFtype =:= undefined -> PFtype;
			     true -> NFtype
			  end,
		      id =
			  if NFid =:= undefined -> PFid;
			     true -> NFid
			  end,
		      uncompressed_size =
			  if NFuncompressed_size =:= undefined ->
				 PFuncompressed_size;
			     true -> NFuncompressed_size
			  end,
		      compressed_size =
			  if NFcompressed_size =:= undefined ->
				 PFcompressed_size;
			     true -> NFcompressed_size
			  end}.

-compile({nowarn_unused_function,merge_msg_annotation_pb/3}).
merge_msg_annotation_pb(#annotation_pb{description =
					   PFdescription,
				       attributes = PFattributes},
			#annotation_pb{description = NFdescription,
				       attributes = NFattributes},
			TrUserData) ->
    #annotation_pb{description =
		       if PFdescription /= undefined,
			  NFdescription /= undefined ->
			      merge_msg_truncatable_string_pb(PFdescription,
							      NFdescription,
							      TrUserData);
			  PFdescription == undefined -> NFdescription;
			  NFdescription == undefined -> PFdescription
		       end,
		   attributes =
		       if PFattributes /= undefined,
			  NFattributes /= undefined ->
			      merge_msg_attributes_pb(PFattributes,
						      NFattributes, TrUserData);
			  PFattributes == undefined -> NFattributes;
			  NFattributes == undefined -> PFattributes
		       end}.

-compile({nowarn_unused_function,merge_msg_time_events_pb/3}).
merge_msg_time_events_pb(#time_events_pb{time_event =
					     PFtime_event,
					 dropped_annotations_count =
					     PFdropped_annotations_count,
					 dropped_message_events_count =
					     PFdropped_message_events_count},
			 #time_events_pb{time_event = NFtime_event,
					 dropped_annotations_count =
					     NFdropped_annotations_count,
					 dropped_message_events_count =
					     NFdropped_message_events_count},
			 TrUserData) ->
    #time_events_pb{time_event =
			if PFtime_event /= undefined,
			   NFtime_event /= undefined ->
			       'erlang_++'(PFtime_event, NFtime_event,
					   TrUserData);
			   PFtime_event == undefined -> NFtime_event;
			   NFtime_event == undefined -> PFtime_event
			end,
		    dropped_annotations_count =
			if NFdropped_annotations_count =:= undefined ->
			       PFdropped_annotations_count;
			   true -> NFdropped_annotations_count
			end,
		    dropped_message_events_count =
			if NFdropped_message_events_count =:= undefined ->
			       PFdropped_message_events_count;
			   true -> NFdropped_message_events_count
			end}.

-compile({nowarn_unused_function,merge_msg_link_pb/3}).
merge_msg_link_pb(#link_pb{trace_id = PFtrace_id,
			   span_id = PFspan_id, type = PFtype,
			   attributes = PFattributes},
		  #link_pb{trace_id = NFtrace_id, span_id = NFspan_id,
			   type = NFtype, attributes = NFattributes},
		  TrUserData) ->
    #link_pb{trace_id =
		 if NFtrace_id =:= undefined -> PFtrace_id;
		    true -> NFtrace_id
		 end,
	     span_id =
		 if NFspan_id =:= undefined -> PFspan_id;
		    true -> NFspan_id
		 end,
	     type =
		 if NFtype =:= undefined -> PFtype;
		    true -> NFtype
		 end,
	     attributes =
		 if PFattributes /= undefined,
		    NFattributes /= undefined ->
			merge_msg_attributes_pb(PFattributes, NFattributes,
						TrUserData);
		    PFattributes == undefined -> NFattributes;
		    NFattributes == undefined -> PFattributes
		 end}.

-compile({nowarn_unused_function,merge_msg_links_pb/3}).
merge_msg_links_pb(#links_pb{link = PFlink,
			     dropped_links_count = PFdropped_links_count},
		   #links_pb{link = NFlink,
			     dropped_links_count = NFdropped_links_count},
		   TrUserData) ->
    #links_pb{link =
		  if PFlink /= undefined, NFlink /= undefined ->
			 'erlang_++'(PFlink, NFlink, TrUserData);
		     PFlink == undefined -> NFlink;
		     NFlink == undefined -> PFlink
		  end,
	      dropped_links_count =
		  if NFdropped_links_count =:= undefined ->
			 PFdropped_links_count;
		     true -> NFdropped_links_count
		  end}.

-compile({nowarn_unused_function,merge_msg_span_pb/3}).
merge_msg_span_pb(#span_pb{trace_id = PFtrace_id,
			   span_id = PFspan_id, tracestate = PFtracestate,
			   parent_span_id = PFparent_span_id, name = PFname,
			   kind = PFkind, start_time = PFstart_time,
			   end_time = PFend_time, attributes = PFattributes,
			   stack_trace = PFstack_trace,
			   time_events = PFtime_events, links = PFlinks,
			   status = PFstatus,
			   same_process_as_parent_span =
			       PFsame_process_as_parent_span,
			   child_span_count = PFchild_span_count},
		  #span_pb{trace_id = NFtrace_id, span_id = NFspan_id,
			   tracestate = NFtracestate,
			   parent_span_id = NFparent_span_id, name = NFname,
			   kind = NFkind, start_time = NFstart_time,
			   end_time = NFend_time, attributes = NFattributes,
			   stack_trace = NFstack_trace,
			   time_events = NFtime_events, links = NFlinks,
			   status = NFstatus,
			   same_process_as_parent_span =
			       NFsame_process_as_parent_span,
			   child_span_count = NFchild_span_count},
		  TrUserData) ->
    #span_pb{trace_id =
		 if NFtrace_id =:= undefined -> PFtrace_id;
		    true -> NFtrace_id
		 end,
	     span_id =
		 if NFspan_id =:= undefined -> PFspan_id;
		    true -> NFspan_id
		 end,
	     tracestate =
		 if PFtracestate /= undefined,
		    NFtracestate /= undefined ->
			merge_msg_tracestate_pb(PFtracestate, NFtracestate,
						TrUserData);
		    PFtracestate == undefined -> NFtracestate;
		    NFtracestate == undefined -> PFtracestate
		 end,
	     parent_span_id =
		 if NFparent_span_id =:= undefined -> PFparent_span_id;
		    true -> NFparent_span_id
		 end,
	     name =
		 if PFname /= undefined, NFname /= undefined ->
			merge_msg_truncatable_string_pb(PFname, NFname,
							TrUserData);
		    PFname == undefined -> NFname;
		    NFname == undefined -> PFname
		 end,
	     kind =
		 if NFkind =:= undefined -> PFkind;
		    true -> NFkind
		 end,
	     start_time =
		 if PFstart_time /= undefined,
		    NFstart_time /= undefined ->
			merge_msg_timestamp_pb(PFstart_time, NFstart_time,
					       TrUserData);
		    PFstart_time == undefined -> NFstart_time;
		    NFstart_time == undefined -> PFstart_time
		 end,
	     end_time =
		 if PFend_time /= undefined, NFend_time /= undefined ->
			merge_msg_timestamp_pb(PFend_time, NFend_time,
					       TrUserData);
		    PFend_time == undefined -> NFend_time;
		    NFend_time == undefined -> PFend_time
		 end,
	     attributes =
		 if PFattributes /= undefined,
		    NFattributes /= undefined ->
			merge_msg_attributes_pb(PFattributes, NFattributes,
						TrUserData);
		    PFattributes == undefined -> NFattributes;
		    NFattributes == undefined -> PFattributes
		 end,
	     stack_trace =
		 if PFstack_trace /= undefined,
		    NFstack_trace /= undefined ->
			merge_msg_stack_trace_pb(PFstack_trace, NFstack_trace,
						 TrUserData);
		    PFstack_trace == undefined -> NFstack_trace;
		    NFstack_trace == undefined -> PFstack_trace
		 end,
	     time_events =
		 if PFtime_events /= undefined,
		    NFtime_events /= undefined ->
			merge_msg_time_events_pb(PFtime_events, NFtime_events,
						 TrUserData);
		    PFtime_events == undefined -> NFtime_events;
		    NFtime_events == undefined -> PFtime_events
		 end,
	     links =
		 if PFlinks /= undefined, NFlinks /= undefined ->
			merge_msg_links_pb(PFlinks, NFlinks, TrUserData);
		    PFlinks == undefined -> NFlinks;
		    NFlinks == undefined -> PFlinks
		 end,
	     status =
		 if PFstatus /= undefined, NFstatus /= undefined ->
			merge_msg_status_pb(PFstatus, NFstatus, TrUserData);
		    PFstatus == undefined -> NFstatus;
		    NFstatus == undefined -> PFstatus
		 end,
	     same_process_as_parent_span =
		 if PFsame_process_as_parent_span /= undefined,
		    NFsame_process_as_parent_span /= undefined ->
			merge_msg_bool_value_pb(PFsame_process_as_parent_span,
						NFsame_process_as_parent_span,
						TrUserData);
		    PFsame_process_as_parent_span == undefined ->
			NFsame_process_as_parent_span;
		    NFsame_process_as_parent_span == undefined ->
			PFsame_process_as_parent_span
		 end,
	     child_span_count =
		 if PFchild_span_count /= undefined,
		    NFchild_span_count /= undefined ->
			merge_msg_u_int_32_value_pb(PFchild_span_count,
						    NFchild_span_count,
						    TrUserData);
		    PFchild_span_count == undefined -> NFchild_span_count;
		    NFchild_span_count == undefined -> PFchild_span_count
		 end}.

-compile({nowarn_unused_function,merge_msg_status_pb/3}).
merge_msg_status_pb(#status_pb{code = PFcode,
			       message = PFmessage},
		    #status_pb{code = NFcode, message = NFmessage}, _) ->
    #status_pb{code =
		   if NFcode =:= undefined -> PFcode;
		      true -> NFcode
		   end,
	       message =
		   if NFmessage =:= undefined -> PFmessage;
		      true -> NFmessage
		   end}.

-compile({nowarn_unused_function,merge_msg_attribute_value_pb/3}).
merge_msg_attribute_value_pb(#attribute_value_pb{value =
						     PFvalue},
			     #attribute_value_pb{value = NFvalue},
			     TrUserData) ->
    #attribute_value_pb{value =
			    case {PFvalue, NFvalue} of
			      {{string_value, OPFvalue},
			       {string_value, ONFvalue}} ->
				  {string_value,
				   merge_msg_truncatable_string_pb(OPFvalue,
								   ONFvalue,
								   TrUserData)};
			      {_, undefined} -> PFvalue;
			      _ -> NFvalue
			    end}.

-compile({nowarn_unused_function,merge_msg_stack_frame_pb/3}).
merge_msg_stack_frame_pb(#stack_frame_pb{function_name =
					     PFfunction_name,
					 original_function_name =
					     PForiginal_function_name,
					 file_name = PFfile_name,
					 line_number = PFline_number,
					 column_number = PFcolumn_number,
					 load_module = PFload_module,
					 source_version = PFsource_version},
			 #stack_frame_pb{function_name = NFfunction_name,
					 original_function_name =
					     NForiginal_function_name,
					 file_name = NFfile_name,
					 line_number = NFline_number,
					 column_number = NFcolumn_number,
					 load_module = NFload_module,
					 source_version = NFsource_version},
			 TrUserData) ->
    #stack_frame_pb{function_name =
			if PFfunction_name /= undefined,
			   NFfunction_name /= undefined ->
			       merge_msg_truncatable_string_pb(PFfunction_name,
							       NFfunction_name,
							       TrUserData);
			   PFfunction_name == undefined -> NFfunction_name;
			   NFfunction_name == undefined -> PFfunction_name
			end,
		    original_function_name =
			if PForiginal_function_name /= undefined,
			   NForiginal_function_name /= undefined ->
			       merge_msg_truncatable_string_pb(PForiginal_function_name,
							       NForiginal_function_name,
							       TrUserData);
			   PForiginal_function_name == undefined ->
			       NForiginal_function_name;
			   NForiginal_function_name == undefined ->
			       PForiginal_function_name
			end,
		    file_name =
			if PFfile_name /= undefined, NFfile_name /= undefined ->
			       merge_msg_truncatable_string_pb(PFfile_name,
							       NFfile_name,
							       TrUserData);
			   PFfile_name == undefined -> NFfile_name;
			   NFfile_name == undefined -> PFfile_name
			end,
		    line_number =
			if NFline_number =:= undefined -> PFline_number;
			   true -> NFline_number
			end,
		    column_number =
			if NFcolumn_number =:= undefined -> PFcolumn_number;
			   true -> NFcolumn_number
			end,
		    load_module =
			if PFload_module /= undefined,
			   NFload_module /= undefined ->
			       merge_msg_module_pb(PFload_module, NFload_module,
						   TrUserData);
			   PFload_module == undefined -> NFload_module;
			   NFload_module == undefined -> PFload_module
			end,
		    source_version =
			if PFsource_version /= undefined,
			   NFsource_version /= undefined ->
			       merge_msg_truncatable_string_pb(PFsource_version,
							       NFsource_version,
							       TrUserData);
			   PFsource_version == undefined -> NFsource_version;
			   NFsource_version == undefined -> PFsource_version
			end}.

-compile({nowarn_unused_function,merge_msg_stack_frames_pb/3}).
merge_msg_stack_frames_pb(#stack_frames_pb{frame =
					       PFframe,
					   dropped_frames_count =
					       PFdropped_frames_count},
			  #stack_frames_pb{frame = NFframe,
					   dropped_frames_count =
					       NFdropped_frames_count},
			  TrUserData) ->
    #stack_frames_pb{frame =
			 if PFframe /= undefined, NFframe /= undefined ->
				'erlang_++'(PFframe, NFframe, TrUserData);
			    PFframe == undefined -> NFframe;
			    NFframe == undefined -> PFframe
			 end,
		     dropped_frames_count =
			 if NFdropped_frames_count =:= undefined ->
				PFdropped_frames_count;
			    true -> NFdropped_frames_count
			 end}.

-compile({nowarn_unused_function,merge_msg_stack_trace_pb/3}).
merge_msg_stack_trace_pb(#stack_trace_pb{stack_frames =
					     PFstack_frames,
					 stack_trace_hash_id =
					     PFstack_trace_hash_id},
			 #stack_trace_pb{stack_frames = NFstack_frames,
					 stack_trace_hash_id =
					     NFstack_trace_hash_id},
			 TrUserData) ->
    #stack_trace_pb{stack_frames =
			if PFstack_frames /= undefined,
			   NFstack_frames /= undefined ->
			       merge_msg_stack_frames_pb(PFstack_frames,
							 NFstack_frames,
							 TrUserData);
			   PFstack_frames == undefined -> NFstack_frames;
			   NFstack_frames == undefined -> PFstack_frames
			end,
		    stack_trace_hash_id =
			if NFstack_trace_hash_id =:= undefined ->
			       PFstack_trace_hash_id;
			   true -> NFstack_trace_hash_id
			end}.

-compile({nowarn_unused_function,merge_msg_module_pb/3}).
merge_msg_module_pb(#module_pb{module = PFmodule,
			       build_id = PFbuild_id},
		    #module_pb{module = NFmodule, build_id = NFbuild_id},
		    TrUserData) ->
    #module_pb{module =
		   if PFmodule /= undefined, NFmodule /= undefined ->
			  merge_msg_truncatable_string_pb(PFmodule, NFmodule,
							  TrUserData);
		      PFmodule == undefined -> NFmodule;
		      NFmodule == undefined -> PFmodule
		   end,
	       build_id =
		   if PFbuild_id /= undefined, NFbuild_id /= undefined ->
			  merge_msg_truncatable_string_pb(PFbuild_id,
							  NFbuild_id,
							  TrUserData);
		      PFbuild_id == undefined -> NFbuild_id;
		      NFbuild_id == undefined -> PFbuild_id
		   end}.

-compile({nowarn_unused_function,merge_msg_truncatable_string_pb/3}).
merge_msg_truncatable_string_pb(#truncatable_string_pb{value
							   = PFvalue,
						       truncated_byte_count =
							   PFtruncated_byte_count},
				#truncatable_string_pb{value = NFvalue,
						       truncated_byte_count =
							   NFtruncated_byte_count},
				_) ->
    #truncatable_string_pb{value =
			       if NFvalue =:= undefined -> PFvalue;
				  true -> NFvalue
			       end,
			   truncated_byte_count =
			       if NFtruncated_byte_count =:= undefined ->
				      PFtruncated_byte_count;
				  true -> NFtruncated_byte_count
			       end}.

-compile({nowarn_unused_function,merge_msg_timestamp_pb/3}).
merge_msg_timestamp_pb(#timestamp_pb{seconds =
					 PFseconds,
				     nanos = PFnanos},
		       #timestamp_pb{seconds = NFseconds, nanos = NFnanos},
		       _) ->
    #timestamp_pb{seconds =
		      if NFseconds =:= undefined -> PFseconds;
			 true -> NFseconds
		      end,
		  nanos =
		      if NFnanos =:= undefined -> PFnanos;
			 true -> NFnanos
		      end}.

-compile({nowarn_unused_function,merge_msg_double_value_pb/3}).
merge_msg_double_value_pb(#double_value_pb{value =
					       PFvalue},
			  #double_value_pb{value = NFvalue}, _) ->
    #double_value_pb{value =
			 if NFvalue =:= undefined -> PFvalue;
			    true -> NFvalue
			 end}.

-compile({nowarn_unused_function,merge_msg_float_value_pb/3}).
merge_msg_float_value_pb(#float_value_pb{value =
					     PFvalue},
			 #float_value_pb{value = NFvalue}, _) ->
    #float_value_pb{value =
			if NFvalue =:= undefined -> PFvalue;
			   true -> NFvalue
			end}.

-compile({nowarn_unused_function,merge_msg_int_64_value_pb/3}).
merge_msg_int_64_value_pb(#int_64_value_pb{value =
					       PFvalue},
			  #int_64_value_pb{value = NFvalue}, _) ->
    #int_64_value_pb{value =
			 if NFvalue =:= undefined -> PFvalue;
			    true -> NFvalue
			 end}.

-compile({nowarn_unused_function,merge_msg_u_int_64_value_pb/3}).
merge_msg_u_int_64_value_pb(#u_int_64_value_pb{value =
						   PFvalue},
			    #u_int_64_value_pb{value = NFvalue}, _) ->
    #u_int_64_value_pb{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end}.

-compile({nowarn_unused_function,merge_msg_int_32_value_pb/3}).
merge_msg_int_32_value_pb(#int_32_value_pb{value =
					       PFvalue},
			  #int_32_value_pb{value = NFvalue}, _) ->
    #int_32_value_pb{value =
			 if NFvalue =:= undefined -> PFvalue;
			    true -> NFvalue
			 end}.

-compile({nowarn_unused_function,merge_msg_u_int_32_value_pb/3}).
merge_msg_u_int_32_value_pb(#u_int_32_value_pb{value =
						   PFvalue},
			    #u_int_32_value_pb{value = NFvalue}, _) ->
    #u_int_32_value_pb{value =
			   if NFvalue =:= undefined -> PFvalue;
			      true -> NFvalue
			   end}.

-compile({nowarn_unused_function,merge_msg_bool_value_pb/3}).
merge_msg_bool_value_pb(#bool_value_pb{value = PFvalue},
			#bool_value_pb{value = NFvalue}, _) ->
    #bool_value_pb{value =
		       if NFvalue =:= undefined -> PFvalue;
			  true -> NFvalue
		       end}.

-compile({nowarn_unused_function,merge_msg_string_value_pb/3}).
merge_msg_string_value_pb(#string_value_pb{value =
					       PFvalue},
			  #string_value_pb{value = NFvalue}, _) ->
    #string_value_pb{value =
			 if NFvalue =:= undefined -> PFvalue;
			    true -> NFvalue
			 end}.

-compile({nowarn_unused_function,merge_msg_bytes_value_pb/3}).
merge_msg_bytes_value_pb(#bytes_value_pb{value =
					     PFvalue},
			 #bytes_value_pb{value = NFvalue}, _) ->
    #bytes_value_pb{value =
			if NFvalue =:= undefined -> PFvalue;
			   true -> NFvalue
			end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      tracestate_pb ->
	  v_msg_tracestate_pb(Msg, [MsgName], TrUserData);
      entry_pb -> v_msg_entry_pb(Msg, [MsgName], TrUserData);
      attributes_pb ->
	  v_msg_attributes_pb(Msg, [MsgName], TrUserData);
      time_event_pb ->
	  v_msg_time_event_pb(Msg, [MsgName], TrUserData);
      message_event_pb ->
	  v_msg_message_event_pb(Msg, [MsgName], TrUserData);
      annotation_pb ->
	  v_msg_annotation_pb(Msg, [MsgName], TrUserData);
      time_events_pb ->
	  v_msg_time_events_pb(Msg, [MsgName], TrUserData);
      link_pb -> v_msg_link_pb(Msg, [MsgName], TrUserData);
      links_pb -> v_msg_links_pb(Msg, [MsgName], TrUserData);
      span_pb -> v_msg_span_pb(Msg, [MsgName], TrUserData);
      status_pb ->
	  v_msg_status_pb(Msg, [MsgName], TrUserData);
      attribute_value_pb ->
	  v_msg_attribute_value_pb(Msg, [MsgName], TrUserData);
      stack_frame_pb ->
	  v_msg_stack_frame_pb(Msg, [MsgName], TrUserData);
      stack_frames_pb ->
	  v_msg_stack_frames_pb(Msg, [MsgName], TrUserData);
      stack_trace_pb ->
	  v_msg_stack_trace_pb(Msg, [MsgName], TrUserData);
      module_pb ->
	  v_msg_module_pb(Msg, [MsgName], TrUserData);
      truncatable_string_pb ->
	  v_msg_truncatable_string_pb(Msg, [MsgName], TrUserData);
      timestamp_pb ->
	  v_msg_timestamp_pb(Msg, [MsgName], TrUserData);
      double_value_pb ->
	  v_msg_double_value_pb(Msg, [MsgName], TrUserData);
      float_value_pb ->
	  v_msg_float_value_pb(Msg, [MsgName], TrUserData);
      int_64_value_pb ->
	  v_msg_int_64_value_pb(Msg, [MsgName], TrUserData);
      u_int_64_value_pb ->
	  v_msg_u_int_64_value_pb(Msg, [MsgName], TrUserData);
      int_32_value_pb ->
	  v_msg_int_32_value_pb(Msg, [MsgName], TrUserData);
      u_int_32_value_pb ->
	  v_msg_u_int_32_value_pb(Msg, [MsgName], TrUserData);
      bool_value_pb ->
	  v_msg_bool_value_pb(Msg, [MsgName], TrUserData);
      string_value_pb ->
	  v_msg_string_value_pb(Msg, [MsgName], TrUserData);
      bytes_value_pb ->
	  v_msg_bytes_value_pb(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_tracestate_pb/3}).
-dialyzer({nowarn_function,v_msg_tracestate_pb/3}).
v_msg_tracestate_pb(#tracestate_pb{entries = F1}, Path,
		    TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_entry_pb(Elem, [entries | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, entry_pb}}, F1,
			 [entries | Path])
    end,
    ok;
v_msg_tracestate_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tracestate_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_entry_pb/3}).
-dialyzer({nowarn_function,v_msg_entry_pb/3}).
v_msg_entry_pb(#entry_pb{key = F1, value = F2}, Path,
	       TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path], TrUserData)
    end,
    ok;
v_msg_entry_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, entry_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_attributes_pb/3}).
-dialyzer({nowarn_function,v_msg_attributes_pb/3}).
v_msg_attributes_pb(#attributes_pb{attribute_map = F1,
				   dropped_attributes_count = F2},
		    Path, TrUserData) ->
    'v_map<string,attribute_value_pb>'(F1,
				       [attribute_map | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_attributes_count | Path],
			TrUserData)
    end,
    ok;
v_msg_attributes_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, attributes_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_time_event_pb/3}).
-dialyzer({nowarn_function,v_msg_time_event_pb/3}).
v_msg_time_event_pb(#time_event_pb{time = F1,
				   value = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_timestamp_pb(F1, [time | Path], TrUserData)
    end,
    case F2 of
      undefined -> ok;
      {annotation, OF2} ->
	  v_msg_annotation_pb(OF2, [annotation, value | Path],
			      TrUserData);
      {message_event, OF2} ->
	  v_msg_message_event_pb(OF2,
				 [message_event, value | Path], TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, [value | Path])
    end,
    ok;
v_msg_time_event_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, time_event_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_message_event_pb/3}).
-dialyzer({nowarn_function,v_msg_message_event_pb/3}).
v_msg_message_event_pb(#message_event_pb{type = F1,
					 id = F2, uncompressed_size = F3,
					 compressed_size = F4},
		       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(F1,
									       [type
										| Path],
									       TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint64(F2, [id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_uint64(F3, [uncompressed_size | Path],
			 TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4, [compressed_size | Path], TrUserData)
    end,
    ok;
v_msg_message_event_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_event_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_annotation_pb/3}).
-dialyzer({nowarn_function,v_msg_annotation_pb/3}).
v_msg_annotation_pb(#annotation_pb{description = F1,
				   attributes = F2},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F1, [description | Path],
				       TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_attributes_pb(F2, [attributes | Path], TrUserData)
    end,
    ok;
v_msg_annotation_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, annotation_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_time_events_pb/3}).
-dialyzer({nowarn_function,v_msg_time_events_pb/3}).
v_msg_time_events_pb(#time_events_pb{time_event = F1,
				     dropped_annotations_count = F2,
				     dropped_message_events_count = F3},
		     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_time_event_pb(Elem, [time_event | Path],
				    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, time_event_pb}},
			 F1, [time_event | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_annotations_count | Path],
			TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int32(F3, [dropped_message_events_count | Path],
			TrUserData)
    end,
    ok;
v_msg_time_events_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, time_events_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_link_pb/3}).
-dialyzer({nowarn_function,v_msg_link_pb/3}).
v_msg_link_pb(#link_pb{trace_id = F1, span_id = F2,
		       type = F3, attributes = F4},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [trace_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [span_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   'v_enum_opencensus.proto.trace.v1.Span.Link.Type'(F3,
							     [type | Path],
							     TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_attributes_pb(F4, [attributes | Path], TrUserData)
    end,
    ok;
v_msg_link_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, link_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_links_pb/3}).
-dialyzer({nowarn_function,v_msg_links_pb/3}).
v_msg_links_pb(#links_pb{link = F1,
			 dropped_links_count = F2},
	       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_link_pb(Elem, [link | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, link_pb}}, F1,
			 [link | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_links_count | Path],
			TrUserData)
    end,
    ok;
v_msg_links_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, links_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_span_pb/3}).
-dialyzer({nowarn_function,v_msg_span_pb/3}).
v_msg_span_pb(#span_pb{trace_id = F1, span_id = F2,
		       tracestate = F3, parent_span_id = F4, name = F5,
		       kind = F6, start_time = F7, end_time = F8,
		       attributes = F9, stack_trace = F10, time_events = F11,
		       links = F12, status = F13,
		       same_process_as_parent_span = F14,
		       child_span_count = F15},
	      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [trace_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_bytes(F2, [span_id | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_tracestate_pb(F3, [tracestate | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_bytes(F4, [parent_span_id | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F5, [name | Path],
				       TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   'v_enum_opencensus.proto.trace.v1.Span.SpanKind'(F6,
							    [kind | Path],
							    TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_timestamp_pb(F7, [start_time | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_msg_timestamp_pb(F8, [end_time | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_msg_attributes_pb(F9, [attributes | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_stack_trace_pb(F10, [stack_trace | Path],
				TrUserData)
    end,
    if F11 == undefined -> ok;
       true ->
	   v_msg_time_events_pb(F11, [time_events | Path],
				TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_msg_links_pb(F12, [links | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true ->
	   v_msg_status_pb(F13, [status | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true ->
	   v_msg_bool_value_pb(F14,
			       [same_process_as_parent_span | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true ->
	   v_msg_u_int_32_value_pb(F15, [child_span_count | Path],
				   TrUserData)
    end,
    ok;
v_msg_span_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, span_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_status_pb/3}).
-dialyzer({nowarn_function,v_msg_status_pb/3}).
v_msg_status_pb(#status_pb{code = F1, message = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [code | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [message | Path], TrUserData)
    end,
    ok;
v_msg_status_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, status_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_attribute_value_pb/3}).
-dialyzer({nowarn_function,v_msg_attribute_value_pb/3}).
v_msg_attribute_value_pb(#attribute_value_pb{value =
						 F1},
			 Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {string_value, OF1} ->
	  v_msg_truncatable_string_pb(OF1,
				      [string_value, value | Path], TrUserData);
      {int_value, OF1} ->
	  v_type_int64(OF1, [int_value, value | Path],
		       TrUserData);
      {bool_value, OF1} ->
	  v_type_bool(OF1, [bool_value, value | Path],
		      TrUserData);
      {double_value, OF1} ->
	  v_type_double(OF1, [double_value, value | Path],
			TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [value | Path])
    end,
    ok;
v_msg_attribute_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, attribute_value_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_stack_frame_pb/3}).
-dialyzer({nowarn_function,v_msg_stack_frame_pb/3}).
v_msg_stack_frame_pb(#stack_frame_pb{function_name = F1,
				     original_function_name = F2,
				     file_name = F3, line_number = F4,
				     column_number = F5, load_module = F6,
				     source_version = F7},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F1, [function_name | Path],
				       TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F2,
				       [original_function_name | Path],
				       TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F3, [file_name | Path],
				       TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [line_number | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_int64(F5, [column_number | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_msg_module_pb(F6, [load_module | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F7, [source_version | Path],
				       TrUserData)
    end,
    ok;
v_msg_stack_frame_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_frame_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_stack_frames_pb/3}).
-dialyzer({nowarn_function,v_msg_stack_frames_pb/3}).
v_msg_stack_frames_pb(#stack_frames_pb{frame = F1,
				       dropped_frames_count = F2},
		      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_stack_frame_pb(Elem, [frame | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, stack_frame_pb}},
			 F1, [frame | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [dropped_frames_count | Path],
			TrUserData)
    end,
    ok;
v_msg_stack_frames_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_frames_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_stack_trace_pb/3}).
-dialyzer({nowarn_function,v_msg_stack_trace_pb/3}).
v_msg_stack_trace_pb(#stack_trace_pb{stack_frames = F1,
				     stack_trace_hash_id = F2},
		     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_stack_frames_pb(F1, [stack_frames | Path],
				 TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_uint64(F2, [stack_trace_hash_id | Path],
			 TrUserData)
    end,
    ok;
v_msg_stack_trace_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_trace_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_module_pb/3}).
-dialyzer({nowarn_function,v_msg_module_pb/3}).
v_msg_module_pb(#module_pb{module = F1, build_id = F2},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F1, [module | Path],
				       TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_msg_truncatable_string_pb(F2, [build_id | Path],
				       TrUserData)
    end,
    ok;
v_msg_module_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, module_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_truncatable_string_pb/3}).
-dialyzer({nowarn_function,v_msg_truncatable_string_pb/3}).
v_msg_truncatable_string_pb(#truncatable_string_pb{value
						       = F1,
						   truncated_byte_count = F2},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int32(F2, [truncated_byte_count | Path],
			TrUserData)
    end,
    ok;
v_msg_truncatable_string_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, truncatable_string_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_timestamp_pb/3}).
-dialyzer({nowarn_function,v_msg_timestamp_pb/3}).
v_msg_timestamp_pb(#timestamp_pb{seconds = F1,
				 nanos = F2},
		   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [seconds | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [nanos | Path], TrUserData)
    end,
    ok;
v_msg_timestamp_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_double_value_pb/3}).
-dialyzer({nowarn_function,v_msg_double_value_pb/3}).
v_msg_double_value_pb(#double_value_pb{value = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_double(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_double_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, double_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_float_value_pb/3}).
-dialyzer({nowarn_function,v_msg_float_value_pb/3}).
v_msg_float_value_pb(#float_value_pb{value = F1}, Path,
		     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_float(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_float_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, float_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_int_64_value_pb/3}).
-dialyzer({nowarn_function,v_msg_int_64_value_pb/3}).
v_msg_int_64_value_pb(#int_64_value_pb{value = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_int_64_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_64_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_64_value_pb/3}).
-dialyzer({nowarn_function,v_msg_u_int_64_value_pb/3}).
v_msg_u_int_64_value_pb(#u_int_64_value_pb{value = F1},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint64(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_u_int_64_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_64_value_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_int_32_value_pb/3}).
-dialyzer({nowarn_function,v_msg_int_32_value_pb/3}).
v_msg_int_32_value_pb(#int_32_value_pb{value = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_int_32_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_32_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_32_value_pb/3}).
-dialyzer({nowarn_function,v_msg_u_int_32_value_pb/3}).
v_msg_u_int_32_value_pb(#u_int_32_value_pb{value = F1},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_u_int_32_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_32_value_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_bool_value_pb/3}).
-dialyzer({nowarn_function,v_msg_bool_value_pb/3}).
v_msg_bool_value_pb(#bool_value_pb{value = F1}, Path,
		    TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_bool_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bool_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_string_value_pb/3}).
-dialyzer({nowarn_function,v_msg_string_value_pb/3}).
v_msg_string_value_pb(#string_value_pb{value = F1},
		      Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_string_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, string_value_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_bytes_value_pb/3}).
-dialyzer({nowarn_function,v_msg_bytes_value_pb/3}).
v_msg_bytes_value_pb(#bytes_value_pb{value = F1}, Path,
		     TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bytes(F1, [value | Path], TrUserData)
    end,
    ok;
v_msg_bytes_value_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bytes_value_pb}, X, Path).

-compile({nowarn_unused_function,'v_enum_opencensus.proto.trace.v1.Span.SpanKind'/3}).
-dialyzer({nowarn_function,'v_enum_opencensus.proto.trace.v1.Span.SpanKind'/3}).
'v_enum_opencensus.proto.trace.v1.Span.SpanKind'('SPAN_KIND_UNSPECIFIED',
						 _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.SpanKind'('SERVER',
						 _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.SpanKind'('CLIENT',
						 _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.SpanKind'(V,
						 Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_opencensus.proto.trace.v1.Span.SpanKind'(X,
						 Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'opencensus.proto.trace.v1.Span.SpanKind'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'/3}).
-dialyzer({nowarn_function,'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'/3}).
'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED',
								    _Path,
								    _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('SENT',
								    _Path,
								    _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('RECEIVED',
								    _Path,
								    _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(V,
								    Path,
								    TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(X,
								    Path,
								    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_opencensus.proto.trace.v1.Span.Link.Type'/3}).
-dialyzer({nowarn_function,'v_enum_opencensus.proto.trace.v1.Span.Link.Type'/3}).
'v_enum_opencensus.proto.trace.v1.Span.Link.Type'('TYPE_UNSPECIFIED',
						  _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.Link.Type'('CHILD_LINKED_SPAN',
						  _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.Link.Type'('PARENT_LINKED_SPAN',
						  _Path, _TrUserData) ->
    ok;
'v_enum_opencensus.proto.trace.v1.Span.Link.Type'(V,
						  Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_opencensus.proto.trace.v1.Span.Link.Type'(X,
						  Path, _TrUserData) ->
    mk_type_error({invalid_enum,
		   'opencensus.proto.trace.v1.Span.Link.Type'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,attribute_value_pb>'/3}).
-dialyzer({nowarn_function,'v_map<string,attribute_value_pb>'/3}).
'v_map<string,attribute_value_pb>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_msg_attribute_value_pb(Value, [value | Path],
				TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,attribute_value_pb>'(X, Path,
				   _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_attributes_pb.attribute_map'/2}).
'tr_decode_init_default_attributes_pb.attribute_map'(_,
						     _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_attributes_pb.attribute_map'/3}).
'tr_merge_attributes_pb.attribute_map'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_attributes_pb.attribute_map'/2}).
'tr_decode_repeated_finalize_attributes_pb.attribute_map'(L,
							  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_attributes_pb.attribute_map'/2}).
'tr_encode_attributes_pb.attribute_map'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_attributes_pb.attribute_map'/3}).
'tr_decode_repeated_add_elem_attributes_pb.attribute_map'(Elem,
							  L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_attributes_pb.attribute_map[x]'/2}).
'tr_encode_attributes_pb.attribute_map[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{enum, 'opencensus.proto.trace.v1.Span.SpanKind'},
      [{'SPAN_KIND_UNSPECIFIED', 0}, {'SERVER', 1},
       {'CLIENT', 2}]},
     {{enum,
       'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1},
       {'RECEIVED', 2}]},
     {{enum, 'opencensus.proto.trace.v1.Span.Link.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
       {'PARENT_LINKED_SPAN', 2}]},
     {{msg, tracestate_pb},
      [[{name, entries}, {fnum, 1}, {rnum, 2},
	{type, {msg, entry_pb}}, {occurrence, repeated},
	{opts, []}]]},
     {{msg, entry_pb},
      [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, value}, {fnum, 2}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, attributes_pb},
      [[{name, attribute_map}, {fnum, 1}, {rnum, 2},
	{type, {map, string, {msg, attribute_value_pb}}},
	{occurrence, repeated}, {opts, []}],
       [{name, dropped_attributes_count}, {fnum, 2}, {rnum, 3},
	{type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, time_event_pb},
      [[{name, time}, {fnum, 1}, {rnum, 2},
	{type, {msg, timestamp_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, value}, {rnum, 3},
	{fields,
	 [[{name, annotation}, {fnum, 2}, {rnum, 3},
	   {type, {msg, annotation_pb}}, {occurrence, optional},
	   {opts, []}],
	  [{name, message_event}, {fnum, 3}, {rnum, 3},
	   {type, {msg, message_event_pb}}, {occurrence, optional},
	   {opts, []}]]}]]},
     {{msg, message_event_pb},
      [[{name, type}, {fnum, 1}, {rnum, 2},
	{type,
	 {enum,
	  'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'}},
	{occurrence, optional}, {opts, []}],
       [{name, id}, {fnum, 2}, {rnum, 3}, {type, uint64},
	{occurrence, optional}, {opts, []}],
       [{name, uncompressed_size}, {fnum, 3}, {rnum, 4},
	{type, uint64}, {occurrence, optional}, {opts, []}],
       [{name, compressed_size}, {fnum, 4}, {rnum, 5},
	{type, uint64}, {occurrence, optional}, {opts, []}]]},
     {{msg, annotation_pb},
      [[{name, description}, {fnum, 1}, {rnum, 2},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, attributes}, {fnum, 2}, {rnum, 3},
	{type, {msg, attributes_pb}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, time_events_pb},
      [[{name, time_event}, {fnum, 1}, {rnum, 2},
	{type, {msg, time_event_pb}}, {occurrence, repeated},
	{opts, []}],
       [{name, dropped_annotations_count}, {fnum, 2},
	{rnum, 3}, {type, int32}, {occurrence, optional},
	{opts, []}],
       [{name, dropped_message_events_count}, {fnum, 3},
	{rnum, 4}, {type, int32}, {occurrence, optional},
	{opts, []}]]},
     {{msg, link_pb},
      [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, span_id}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, type}, {fnum, 3}, {rnum, 4},
	{type,
	 {enum, 'opencensus.proto.trace.v1.Span.Link.Type'}},
	{occurrence, optional}, {opts, []}],
       [{name, attributes}, {fnum, 4}, {rnum, 5},
	{type, {msg, attributes_pb}}, {occurrence, optional},
	{opts, []}]]},
     {{msg, links_pb},
      [[{name, link}, {fnum, 1}, {rnum, 2},
	{type, {msg, link_pb}}, {occurrence, repeated},
	{opts, []}],
       [{name, dropped_links_count}, {fnum, 2}, {rnum, 3},
	{type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, span_pb},
      [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, span_id}, {fnum, 2}, {rnum, 3}, {type, bytes},
	{occurrence, optional}, {opts, []}],
       [{name, tracestate}, {fnum, 15}, {rnum, 4},
	{type, {msg, tracestate_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, parent_span_id}, {fnum, 3}, {rnum, 5},
	{type, bytes}, {occurrence, optional}, {opts, []}],
       [{name, name}, {fnum, 4}, {rnum, 6},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, kind}, {fnum, 14}, {rnum, 7},
	{type,
	 {enum, 'opencensus.proto.trace.v1.Span.SpanKind'}},
	{occurrence, optional}, {opts, []}],
       [{name, start_time}, {fnum, 5}, {rnum, 8},
	{type, {msg, timestamp_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, end_time}, {fnum, 6}, {rnum, 9},
	{type, {msg, timestamp_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, attributes}, {fnum, 7}, {rnum, 10},
	{type, {msg, attributes_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, stack_trace}, {fnum, 8}, {rnum, 11},
	{type, {msg, stack_trace_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, time_events}, {fnum, 9}, {rnum, 12},
	{type, {msg, time_events_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, links}, {fnum, 10}, {rnum, 13},
	{type, {msg, links_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, status}, {fnum, 11}, {rnum, 14},
	{type, {msg, status_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, same_process_as_parent_span}, {fnum, 12},
	{rnum, 15}, {type, {msg, bool_value_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, child_span_count}, {fnum, 13}, {rnum, 16},
	{type, {msg, u_int_32_value_pb}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, status_pb},
      [[{name, code}, {fnum, 1}, {rnum, 2}, {type, int32},
	{occurrence, optional}, {opts, []}],
       [{name, message}, {fnum, 2}, {rnum, 3}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, attribute_value_pb},
      [[{name, value}, {rnum, 2},
	{fields,
	 [[{name, string_value}, {fnum, 1}, {rnum, 2},
	   {type, {msg, truncatable_string_pb}},
	   {occurrence, optional}, {opts, []}],
	  [{name, int_value}, {fnum, 2}, {rnum, 2}, {type, int64},
	   {occurrence, optional}, {opts, []}],
	  [{name, bool_value}, {fnum, 3}, {rnum, 2}, {type, bool},
	   {occurrence, optional}, {opts, []}],
	  [{name, double_value}, {fnum, 4}, {rnum, 2},
	   {type, double}, {occurrence, optional},
	   {opts, []}]]}]]},
     {{msg, stack_frame_pb},
      [[{name, function_name}, {fnum, 1}, {rnum, 2},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, original_function_name}, {fnum, 2}, {rnum, 3},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, file_name}, {fnum, 3}, {rnum, 4},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, line_number}, {fnum, 4}, {rnum, 5},
	{type, int64}, {occurrence, optional}, {opts, []}],
       [{name, column_number}, {fnum, 5}, {rnum, 6},
	{type, int64}, {occurrence, optional}, {opts, []}],
       [{name, load_module}, {fnum, 6}, {rnum, 7},
	{type, {msg, module_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, source_version}, {fnum, 7}, {rnum, 8},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, stack_frames_pb},
      [[{name, frame}, {fnum, 1}, {rnum, 2},
	{type, {msg, stack_frame_pb}}, {occurrence, repeated},
	{opts, []}],
       [{name, dropped_frames_count}, {fnum, 2}, {rnum, 3},
	{type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, stack_trace_pb},
      [[{name, stack_frames}, {fnum, 1}, {rnum, 2},
	{type, {msg, stack_frames_pb}}, {occurrence, optional},
	{opts, []}],
       [{name, stack_trace_hash_id}, {fnum, 2}, {rnum, 3},
	{type, uint64}, {occurrence, optional}, {opts, []}]]},
     {{msg, module_pb},
      [[{name, module}, {fnum, 1}, {rnum, 2},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}],
       [{name, build_id}, {fnum, 2}, {rnum, 3},
	{type, {msg, truncatable_string_pb}},
	{occurrence, optional}, {opts, []}]]},
     {{msg, truncatable_string_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}],
       [{name, truncated_byte_count}, {fnum, 2}, {rnum, 3},
	{type, int32}, {occurrence, optional}, {opts, []}]]},
     {{msg, timestamp_pb},
      [[{name, seconds}, {fnum, 1}, {rnum, 2}, {type, int64},
	{occurrence, optional}, {opts, []}],
       [{name, nanos}, {fnum, 2}, {rnum, 3}, {type, int32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, double_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, double},
	{occurrence, optional}, {opts, []}]]},
     {{msg, float_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, float},
	{occurrence, optional}, {opts, []}]]},
     {{msg, int_64_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, int64},
	{occurrence, optional}, {opts, []}]]},
     {{msg, u_int_64_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, uint64},
	{occurrence, optional}, {opts, []}]]},
     {{msg, int_32_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, int32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, u_int_32_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, uint32},
	{occurrence, optional}, {opts, []}]]},
     {{msg, bool_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, string_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, string},
	{occurrence, optional}, {opts, []}]]},
     {{msg, bytes_value_pb},
      [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bytes},
	{occurrence, optional}, {opts, []}]]}].


get_msg_names() ->
    [tracestate_pb, entry_pb, attributes_pb, time_event_pb,
     message_event_pb, annotation_pb, time_events_pb,
     link_pb, links_pb, span_pb, status_pb,
     attribute_value_pb, stack_frame_pb, stack_frames_pb,
     stack_trace_pb, module_pb, truncatable_string_pb,
     timestamp_pb, double_value_pb, float_value_pb,
     int_64_value_pb, u_int_64_value_pb, int_32_value_pb,
     u_int_32_value_pb, bool_value_pb, string_value_pb,
     bytes_value_pb].


get_group_names() -> [].


get_msg_or_group_names() ->
    [tracestate_pb, entry_pb, attributes_pb, time_event_pb,
     message_event_pb, annotation_pb, time_events_pb,
     link_pb, links_pb, span_pb, status_pb,
     attribute_value_pb, stack_frame_pb, stack_frames_pb,
     stack_trace_pb, module_pb, truncatable_string_pb,
     timestamp_pb, double_value_pb, float_value_pb,
     int_64_value_pb, u_int_64_value_pb, int_32_value_pb,
     u_int_32_value_pb, bool_value_pb, string_value_pb,
     bytes_value_pb].


get_enum_names() ->
    ['opencensus.proto.trace.v1.Span.SpanKind',
     'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type',
     'opencensus.proto.trace.v1.Span.Link.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(tracestate_pb) ->
    [[{name, entries}, {fnum, 1}, {rnum, 2},
      {type, {msg, entry_pb}}, {occurrence, repeated},
      {opts, []}]];
find_msg_def(entry_pb) ->
    [[{name, key}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, value}, {fnum, 2}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def(attributes_pb) ->
    [[{name, attribute_map}, {fnum, 1}, {rnum, 2},
      {type, {map, string, {msg, attribute_value_pb}}},
      {occurrence, repeated}, {opts, []}],
     [{name, dropped_attributes_count}, {fnum, 2}, {rnum, 3},
      {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def(time_event_pb) ->
    [[{name, time}, {fnum, 1}, {rnum, 2},
      {type, {msg, timestamp_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, value}, {rnum, 3},
      {fields,
       [[{name, annotation}, {fnum, 2}, {rnum, 3},
	 {type, {msg, annotation_pb}}, {occurrence, optional},
	 {opts, []}],
	[{name, message_event}, {fnum, 3}, {rnum, 3},
	 {type, {msg, message_event_pb}}, {occurrence, optional},
	 {opts, []}]]}]];
find_msg_def(message_event_pb) ->
    [[{name, type}, {fnum, 1}, {rnum, 2},
      {type,
       {enum,
	'opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'}},
      {occurrence, optional}, {opts, []}],
     [{name, id}, {fnum, 2}, {rnum, 3}, {type, uint64},
      {occurrence, optional}, {opts, []}],
     [{name, uncompressed_size}, {fnum, 3}, {rnum, 4},
      {type, uint64}, {occurrence, optional}, {opts, []}],
     [{name, compressed_size}, {fnum, 4}, {rnum, 5},
      {type, uint64}, {occurrence, optional}, {opts, []}]];
find_msg_def(annotation_pb) ->
    [[{name, description}, {fnum, 1}, {rnum, 2},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, attributes}, {fnum, 2}, {rnum, 3},
      {type, {msg, attributes_pb}}, {occurrence, optional},
      {opts, []}]];
find_msg_def(time_events_pb) ->
    [[{name, time_event}, {fnum, 1}, {rnum, 2},
      {type, {msg, time_event_pb}}, {occurrence, repeated},
      {opts, []}],
     [{name, dropped_annotations_count}, {fnum, 2},
      {rnum, 3}, {type, int32}, {occurrence, optional},
      {opts, []}],
     [{name, dropped_message_events_count}, {fnum, 3},
      {rnum, 4}, {type, int32}, {occurrence, optional},
      {opts, []}]];
find_msg_def(link_pb) ->
    [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, span_id}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, type}, {fnum, 3}, {rnum, 4},
      {type,
       {enum, 'opencensus.proto.trace.v1.Span.Link.Type'}},
      {occurrence, optional}, {opts, []}],
     [{name, attributes}, {fnum, 4}, {rnum, 5},
      {type, {msg, attributes_pb}}, {occurrence, optional},
      {opts, []}]];
find_msg_def(links_pb) ->
    [[{name, link}, {fnum, 1}, {rnum, 2},
      {type, {msg, link_pb}}, {occurrence, repeated},
      {opts, []}],
     [{name, dropped_links_count}, {fnum, 2}, {rnum, 3},
      {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def(span_pb) ->
    [[{name, trace_id}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, span_id}, {fnum, 2}, {rnum, 3}, {type, bytes},
      {occurrence, optional}, {opts, []}],
     [{name, tracestate}, {fnum, 15}, {rnum, 4},
      {type, {msg, tracestate_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, parent_span_id}, {fnum, 3}, {rnum, 5},
      {type, bytes}, {occurrence, optional}, {opts, []}],
     [{name, name}, {fnum, 4}, {rnum, 6},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, kind}, {fnum, 14}, {rnum, 7},
      {type,
       {enum, 'opencensus.proto.trace.v1.Span.SpanKind'}},
      {occurrence, optional}, {opts, []}],
     [{name, start_time}, {fnum, 5}, {rnum, 8},
      {type, {msg, timestamp_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, end_time}, {fnum, 6}, {rnum, 9},
      {type, {msg, timestamp_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, attributes}, {fnum, 7}, {rnum, 10},
      {type, {msg, attributes_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, stack_trace}, {fnum, 8}, {rnum, 11},
      {type, {msg, stack_trace_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, time_events}, {fnum, 9}, {rnum, 12},
      {type, {msg, time_events_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, links}, {fnum, 10}, {rnum, 13},
      {type, {msg, links_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, status}, {fnum, 11}, {rnum, 14},
      {type, {msg, status_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, same_process_as_parent_span}, {fnum, 12},
      {rnum, 15}, {type, {msg, bool_value_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, child_span_count}, {fnum, 13}, {rnum, 16},
      {type, {msg, u_int_32_value_pb}},
      {occurrence, optional}, {opts, []}]];
find_msg_def(status_pb) ->
    [[{name, code}, {fnum, 1}, {rnum, 2}, {type, int32},
      {occurrence, optional}, {opts, []}],
     [{name, message}, {fnum, 2}, {rnum, 3}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def(attribute_value_pb) ->
    [[{name, value}, {rnum, 2},
      {fields,
       [[{name, string_value}, {fnum, 1}, {rnum, 2},
	 {type, {msg, truncatable_string_pb}},
	 {occurrence, optional}, {opts, []}],
	[{name, int_value}, {fnum, 2}, {rnum, 2}, {type, int64},
	 {occurrence, optional}, {opts, []}],
	[{name, bool_value}, {fnum, 3}, {rnum, 2}, {type, bool},
	 {occurrence, optional}, {opts, []}],
	[{name, double_value}, {fnum, 4}, {rnum, 2},
	 {type, double}, {occurrence, optional}, {opts, []}]]}]];
find_msg_def(stack_frame_pb) ->
    [[{name, function_name}, {fnum, 1}, {rnum, 2},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, original_function_name}, {fnum, 2}, {rnum, 3},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, file_name}, {fnum, 3}, {rnum, 4},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, line_number}, {fnum, 4}, {rnum, 5},
      {type, int64}, {occurrence, optional}, {opts, []}],
     [{name, column_number}, {fnum, 5}, {rnum, 6},
      {type, int64}, {occurrence, optional}, {opts, []}],
     [{name, load_module}, {fnum, 6}, {rnum, 7},
      {type, {msg, module_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, source_version}, {fnum, 7}, {rnum, 8},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}]];
find_msg_def(stack_frames_pb) ->
    [[{name, frame}, {fnum, 1}, {rnum, 2},
      {type, {msg, stack_frame_pb}}, {occurrence, repeated},
      {opts, []}],
     [{name, dropped_frames_count}, {fnum, 2}, {rnum, 3},
      {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def(stack_trace_pb) ->
    [[{name, stack_frames}, {fnum, 1}, {rnum, 2},
      {type, {msg, stack_frames_pb}}, {occurrence, optional},
      {opts, []}],
     [{name, stack_trace_hash_id}, {fnum, 2}, {rnum, 3},
      {type, uint64}, {occurrence, optional}, {opts, []}]];
find_msg_def(module_pb) ->
    [[{name, module}, {fnum, 1}, {rnum, 2},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}],
     [{name, build_id}, {fnum, 2}, {rnum, 3},
      {type, {msg, truncatable_string_pb}},
      {occurrence, optional}, {opts, []}]];
find_msg_def(truncatable_string_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}],
     [{name, truncated_byte_count}, {fnum, 2}, {rnum, 3},
      {type, int32}, {occurrence, optional}, {opts, []}]];
find_msg_def(timestamp_pb) ->
    [[{name, seconds}, {fnum, 1}, {rnum, 2}, {type, int64},
      {occurrence, optional}, {opts, []}],
     [{name, nanos}, {fnum, 2}, {rnum, 3}, {type, int32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(double_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, double},
      {occurrence, optional}, {opts, []}]];
find_msg_def(float_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, float},
      {occurrence, optional}, {opts, []}]];
find_msg_def(int_64_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, int64},
      {occurrence, optional}, {opts, []}]];
find_msg_def(u_int_64_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, uint64},
      {occurrence, optional}, {opts, []}]];
find_msg_def(int_32_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, int32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(u_int_32_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, uint32},
      {occurrence, optional}, {opts, []}]];
find_msg_def(bool_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(string_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, string},
      {occurrence, optional}, {opts, []}]];
find_msg_def(bytes_value_pb) ->
    [[{name, value}, {fnum, 1}, {rnum, 2}, {type, bytes},
      {occurrence, optional}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def('opencensus.proto.trace.v1.Span.SpanKind') ->
    [{'SPAN_KIND_UNSPECIFIED', 0}, {'SERVER', 1},
     {'CLIENT', 2}];
find_enum_def('opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1}, {'RECEIVED', 2}];
find_enum_def('opencensus.proto.trace.v1.Span.Link.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
     {'PARENT_LINKED_SPAN', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('opencensus.proto.trace.v1.Span.SpanKind',
		     Value) ->
    'enum_symbol_by_value_opencensus.proto.trace.v1.Span.SpanKind'(Value);
enum_symbol_by_value('opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type',
		     Value) ->
    'enum_symbol_by_value_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(Value);
enum_symbol_by_value('opencensus.proto.trace.v1.Span.Link.Type',
		     Value) ->
    'enum_symbol_by_value_opencensus.proto.trace.v1.Span.Link.Type'(Value).


enum_value_by_symbol('opencensus.proto.trace.v1.Span.SpanKind',
		     Sym) ->
    'enum_value_by_symbol_opencensus.proto.trace.v1.Span.SpanKind'(Sym);
enum_value_by_symbol('opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type',
		     Sym) ->
    'enum_value_by_symbol_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(Sym);
enum_value_by_symbol('opencensus.proto.trace.v1.Span.Link.Type',
		     Sym) ->
    'enum_value_by_symbol_opencensus.proto.trace.v1.Span.Link.Type'(Sym).


'enum_symbol_by_value_opencensus.proto.trace.v1.Span.SpanKind'(0) ->
    'SPAN_KIND_UNSPECIFIED';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.SpanKind'(1) ->
    'SERVER';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.SpanKind'(2) ->
    'CLIENT'.


'enum_value_by_symbol_opencensus.proto.trace.v1.Span.SpanKind'('SPAN_KIND_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.SpanKind'('SERVER') ->
    1;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.SpanKind'('CLIENT') ->
    2.

'enum_symbol_by_value_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(1) ->
    'SENT';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'(2) ->
    'RECEIVED'.


'enum_value_by_symbol_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('SENT') ->
    1;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type'('RECEIVED') ->
    2.

'enum_symbol_by_value_opencensus.proto.trace.v1.Span.Link.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.Link.Type'(1) ->
    'CHILD_LINKED_SPAN';
'enum_symbol_by_value_opencensus.proto.trace.v1.Span.Link.Type'(2) ->
    'PARENT_LINKED_SPAN'.


'enum_value_by_symbol_opencensus.proto.trace.v1.Span.Link.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.Link.Type'('CHILD_LINKED_SPAN') ->
    1;
'enum_value_by_symbol_opencensus.proto.trace.v1.Span.Link.Type'('PARENT_LINKED_SPAN') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'opencensus.proto.trace.v1_pb'.



gpb_version_as_string() ->
    "4.4.1".

gpb_version_as_list() ->
    [4,4,1].
