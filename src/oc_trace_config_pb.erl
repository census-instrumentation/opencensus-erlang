%% @hidden
%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.1
-module(oc_trace_config_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("oc_trace_config_pb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type trace_config_pb() :: #trace_config_pb{}.

-type probability_sampler_pb() :: #probability_sampler_pb{}.

-type constant_sampler_pb() :: #constant_sampler_pb{}.

-type rate_limiting_sampler_pb() :: #rate_limiting_sampler_pb{}.

-export_type(['trace_config_pb'/0, 'probability_sampler_pb'/0, 'constant_sampler_pb'/0, 'rate_limiting_sampler_pb'/0]).

-spec encode_msg(#trace_config_pb{} | #probability_sampler_pb{} | #constant_sampler_pb{} | #rate_limiting_sampler_pb{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#trace_config_pb{} | #probability_sampler_pb{} | #constant_sampler_pb{} | #rate_limiting_sampler_pb{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#trace_config_pb{} | #probability_sampler_pb{} | #constant_sampler_pb{} | #rate_limiting_sampler_pb{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      trace_config_pb ->
	  encode_msg_trace_config_pb(id(Msg, TrUserData),
				     TrUserData);
      probability_sampler_pb ->
	  encode_msg_probability_sampler_pb(id(Msg, TrUserData),
					    TrUserData);
      constant_sampler_pb ->
	  encode_msg_constant_sampler_pb(id(Msg, TrUserData),
					 TrUserData);
      rate_limiting_sampler_pb ->
	  encode_msg_rate_limiting_sampler_pb(id(Msg, TrUserData),
					      TrUserData)
    end.


encode_msg_trace_config_pb(Msg, TrUserData) ->
    encode_msg_trace_config_pb(Msg, <<>>, TrUserData).


encode_msg_trace_config_pb(#trace_config_pb{sampler =
						F1,
					    max_number_of_attributes = F2,
					    max_number_of_annotations = F3,
					    max_number_of_message_events = F4,
					    max_number_of_links = F5},
			   Bin, TrUserData) ->
    B1 = if F1 =:= undefined -> Bin;
	    true ->
		case id(F1, TrUserData) of
		  {probability_sampler, TF1} ->
		      begin
			TrTF1 = id(TF1, TrUserData),
			e_mfield_trace_config_pb_probability_sampler(TrTF1,
								     <<Bin/binary,
								       10>>,
								     TrUserData)
		      end;
		  {constant_sampler, TF1} ->
		      begin
			TrTF1 = id(TF1, TrUserData),
			e_mfield_trace_config_pb_constant_sampler(TrTF1,
								  <<Bin/binary,
								    18>>,
								  TrUserData)
		      end;
		  {rate_limiting_sampler, TF1} ->
		      begin
			TrTF1 = id(TF1, TrUserData),
			e_mfield_trace_config_pb_rate_limiting_sampler(TrTF1,
								       <<Bin/binary,
									 26>>,
								       TrUserData)
		      end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true ->
			 e_type_int64(TrF2, <<B1/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int64(TrF3, <<B2/binary, 40>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true ->
			 e_type_int64(TrF4, <<B3/binary, 48>>, TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= 0 -> B4;
		true ->
		    e_type_int64(TrF5, <<B4/binary, 56>>, TrUserData)
	     end
	   end
    end.

encode_msg_probability_sampler_pb(Msg, TrUserData) ->
    encode_msg_probability_sampler_pb(Msg, <<>>,
				      TrUserData).


encode_msg_probability_sampler_pb(#probability_sampler_pb{samplingProbability
							      = F1},
				  Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0.0 -> Bin;
		true ->
		    e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	     end
	   end
    end.

encode_msg_constant_sampler_pb(Msg, TrUserData) ->
    encode_msg_constant_sampler_pb(Msg, <<>>, TrUserData).


encode_msg_constant_sampler_pb(#constant_sampler_pb{decision
							= F1},
			       Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= false -> Bin;
		true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

encode_msg_rate_limiting_sampler_pb(Msg, TrUserData) ->
    encode_msg_rate_limiting_sampler_pb(Msg, <<>>,
					TrUserData).


encode_msg_rate_limiting_sampler_pb(#rate_limiting_sampler_pb{qps
								  = F1},
				    Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
	   begin
	     TrF1 = id(F1, TrUserData),
	     if TrF1 =:= 0 -> Bin;
		true ->
		    e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	     end
	   end
    end.

e_mfield_trace_config_pb_probability_sampler(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_probability_sampler_pb(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_trace_config_pb_constant_sampler(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_constant_sampler_pb(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_trace_config_pb_rate_limiting_sampler(Msg, Bin,
					       TrUserData) ->
    SubBin = encode_msg_rate_limiting_sampler_pb(Msg, <<>>,
						 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(trace_config_pb, Bin, TrUserData) ->
    id(decode_msg_trace_config_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(probability_sampler_pb, Bin,
		  TrUserData) ->
    id(decode_msg_probability_sampler_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(constant_sampler_pb, Bin,
		  TrUserData) ->
    id(decode_msg_constant_sampler_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(rate_limiting_sampler_pb, Bin,
		  TrUserData) ->
    id(decode_msg_rate_limiting_sampler_pb(Bin, TrUserData),
       TrUserData).



decode_msg_trace_config_pb(Bin, TrUserData) ->
    dfp_read_field_def_trace_config_pb(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(0, TrUserData), id(0, TrUserData),
				       id(0, TrUserData), id(0, TrUserData),
				       TrUserData).

dfp_read_field_def_trace_config_pb(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_probability_sampler(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_trace_config_pb(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_constant_sampler(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_trace_config_pb(<<26, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_rate_limiting_sampler(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
dfp_read_field_def_trace_config_pb(<<32, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_max_number_of_attributes(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData);
dfp_read_field_def_trace_config_pb(<<40, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_max_number_of_annotations(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      F@_4, F@_5, TrUserData);
dfp_read_field_def_trace_config_pb(<<48, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_max_number_of_message_events(Rest,
							 Z1, Z2, F@_1, F@_2,
							 F@_3, F@_4, F@_5,
							 TrUserData);
dfp_read_field_def_trace_config_pb(<<56, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    d_field_trace_config_pb_max_number_of_links(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_trace_config_pb(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, _) ->
    #trace_config_pb{sampler = F@_1,
		     max_number_of_attributes = F@_2,
		     max_number_of_annotations = F@_3,
		     max_number_of_message_events = F@_4,
		     max_number_of_links = F@_5};
dfp_read_field_def_trace_config_pb(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_trace_config_pb(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_trace_config_pb(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_trace_config_pb(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
dg_read_field_def_trace_config_pb(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_trace_config_pb_probability_sampler(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      18 ->
	  d_field_trace_config_pb_constant_sampler(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      26 ->
	  d_field_trace_config_pb_rate_limiting_sampler(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      32 ->
	  d_field_trace_config_pb_max_number_of_attributes(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, F@_4, F@_5,
							   TrUserData);
      40 ->
	  d_field_trace_config_pb_max_number_of_annotations(Rest,
							    0, 0, F@_1, F@_2,
							    F@_3, F@_4, F@_5,
							    TrUserData);
      48 ->
	  d_field_trace_config_pb_max_number_of_message_events(Rest,
							       0, 0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
      56 ->
	  d_field_trace_config_pb_max_number_of_links(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_trace_config_pb(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_trace_config_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_trace_config_pb(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      TrUserData);
	    3 ->
		skip_group_trace_config_pb(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_trace_config_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_trace_config_pb(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, F@_4, F@_5, _) ->
    #trace_config_pb{sampler = F@_1,
		     max_number_of_attributes = F@_2,
		     max_number_of_annotations = F@_3,
		     max_number_of_message_events = F@_4,
		     max_number_of_links = F@_5}.

d_field_trace_config_pb_probability_sampler(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_probability_sampler(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_trace_config_pb_probability_sampler(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, Prev, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_probability_sampler_pb(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_trace_config_pb(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({probability_sampler,
						 NewFValue},
						TrUserData);
					 {probability_sampler, MVPrev} ->
					     id({probability_sampler,
						 merge_msg_probability_sampler_pb(MVPrev,
										  NewFValue,
										  TrUserData)},
						TrUserData);
					 _ ->
					     id({probability_sampler,
						 NewFValue},
						TrUserData)
				       end,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_trace_config_pb_constant_sampler(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_constant_sampler(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_trace_config_pb_constant_sampler(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_constant_sampler_pb(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_trace_config_pb(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({constant_sampler, NewFValue},
						TrUserData);
					 {constant_sampler, MVPrev} ->
					     id({constant_sampler,
						 merge_msg_constant_sampler_pb(MVPrev,
									       NewFValue,
									       TrUserData)},
						TrUserData);
					 _ ->
					     id({constant_sampler, NewFValue},
						TrUserData)
				       end,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_trace_config_pb_rate_limiting_sampler(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_rate_limiting_sampler(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
d_field_trace_config_pb_rate_limiting_sampler(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, Prev, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rate_limiting_sampler_pb(Bs,
								   TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_trace_config_pb(RestF, 0, 0,
				       case Prev of
					 undefined ->
					     id({rate_limiting_sampler,
						 NewFValue},
						TrUserData);
					 {rate_limiting_sampler, MVPrev} ->
					     id({rate_limiting_sampler,
						 merge_msg_rate_limiting_sampler_pb(MVPrev,
										    NewFValue,
										    TrUserData)},
						TrUserData);
					 _ ->
					     id({rate_limiting_sampler,
						 NewFValue},
						TrUserData)
				       end,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_trace_config_pb_max_number_of_attributes(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_max_number_of_attributes(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
d_field_trace_config_pb_max_number_of_attributes(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, _, F@_3, F@_4,
						 F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_trace_config_pb(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_trace_config_pb_max_number_of_annotations(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_max_number_of_annotations(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
d_field_trace_config_pb_max_number_of_annotations(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, _, F@_4,
						  F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_trace_config_pb(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_trace_config_pb_max_number_of_message_events(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_max_number_of_message_events(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
d_field_trace_config_pb_max_number_of_message_events(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_trace_config_pb(RestF, 0, 0, F@_1,
				       F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_trace_config_pb_max_number_of_links(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_trace_config_pb_max_number_of_links(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_trace_config_pb_max_number_of_links(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_trace_config_pb(RestF, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_trace_config_pb(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_trace_config_pb(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData);
skip_varint_trace_config_pb(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_trace_config_pb(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_trace_config_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    skip_length_delimited_trace_config_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
skip_length_delimited_trace_config_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_trace_config_pb(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_trace_config_pb(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_trace_config_pb(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_trace_config_pb(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_trace_config_pb(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_trace_config_pb(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_trace_config_pb(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_probability_sampler_pb(Bin, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Bin, 0, 0,
					      id(0.0, TrUserData), TrUserData).

dfp_read_field_def_probability_sampler_pb(<<9,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_probability_sampler_pb_samplingProbability(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
dfp_read_field_def_probability_sampler_pb(<<>>, 0, 0,
					  F@_1, _) ->
    #probability_sampler_pb{samplingProbability = F@_1};
dfp_read_field_def_probability_sampler_pb(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_probability_sampler_pb(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_probability_sampler_pb(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_probability_sampler_pb(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_probability_sampler_pb(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_probability_sampler_pb_samplingProbability(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_probability_sampler_pb(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_probability_sampler_pb(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_probability_sampler_pb(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_probability_sampler_pb(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_probability_sampler_pb(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_probability_sampler_pb(<<>>, 0, 0,
					 F@_1, _) ->
    #probability_sampler_pb{samplingProbability = F@_1}.

d_field_probability_sampler_pb_samplingProbability(<<0:48,
						     240, 127, Rest/binary>>,
						   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      id(infinity, TrUserData),
					      TrUserData);
d_field_probability_sampler_pb_samplingProbability(<<0:48,
						     240, 255, Rest/binary>>,
						   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      id('-infinity', TrUserData),
					      TrUserData);
d_field_probability_sampler_pb_samplingProbability(<<_:48,
						     15:4, _:4, _:1, 127:7,
						     Rest/binary>>,
						   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      id(nan, TrUserData), TrUserData);
d_field_probability_sampler_pb_samplingProbability(<<Value:64/little-float,
						     Rest/binary>>,
						   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      id(Value, TrUserData),
					      TrUserData).

skip_varint_probability_sampler_pb(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_probability_sampler_pb(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_probability_sampler_pb(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_probability_sampler_pb(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_probability_sampler_pb(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_probability_sampler_pb(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_probability_sampler_pb(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_probability_sampler_pb(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_probability_sampler_pb(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_probability_sampler_pb(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_probability_sampler_pb(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_probability_sampler_pb(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_constant_sampler_pb(Bin, TrUserData) ->
    dfp_read_field_def_constant_sampler_pb(Bin, 0, 0,
					   id(false, TrUserData), TrUserData).

dfp_read_field_def_constant_sampler_pb(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_constant_sampler_pb_decision(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_constant_sampler_pb(<<>>, 0, 0, F@_1,
				       _) ->
    #constant_sampler_pb{decision = F@_1};
dfp_read_field_def_constant_sampler_pb(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_constant_sampler_pb(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_constant_sampler_pb(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_constant_sampler_pb(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_constant_sampler_pb(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_constant_sampler_pb_decision(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_constant_sampler_pb(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_constant_sampler_pb(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_constant_sampler_pb(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_constant_sampler_pb(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_constant_sampler_pb(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_constant_sampler_pb(<<>>, 0, 0, F@_1,
				      _) ->
    #constant_sampler_pb{decision = F@_1}.

d_field_constant_sampler_pb_decision(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_constant_sampler_pb_decision(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_constant_sampler_pb_decision(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_constant_sampler_pb(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_constant_sampler_pb(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_constant_sampler_pb(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_constant_sampler_pb(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_constant_sampler_pb(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_constant_sampler_pb(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_constant_sampler_pb(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_constant_sampler_pb(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_constant_sampler_pb(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_constant_sampler_pb(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_constant_sampler_pb(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_constant_sampler_pb(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_constant_sampler_pb(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_constant_sampler_pb(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_constant_sampler_pb(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_rate_limiting_sampler_pb(Bin, TrUserData) ->
    dfp_read_field_def_rate_limiting_sampler_pb(Bin, 0, 0,
						id(0, TrUserData), TrUserData).

dfp_read_field_def_rate_limiting_sampler_pb(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_rate_limiting_sampler_pb_qps(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_rate_limiting_sampler_pb(<<>>, 0, 0,
					    F@_1, _) ->
    #rate_limiting_sampler_pb{qps = F@_1};
dfp_read_field_def_rate_limiting_sampler_pb(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_rate_limiting_sampler_pb(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_rate_limiting_sampler_pb(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rate_limiting_sampler_pb(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_rate_limiting_sampler_pb(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rate_limiting_sampler_pb_qps(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rate_limiting_sampler_pb(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_rate_limiting_sampler_pb(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_rate_limiting_sampler_pb(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_rate_limiting_sampler_pb(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_rate_limiting_sampler_pb(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_rate_limiting_sampler_pb(<<>>, 0, 0,
					   F@_1, _) ->
    #rate_limiting_sampler_pb{qps = F@_1}.

d_field_rate_limiting_sampler_pb_qps(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rate_limiting_sampler_pb_qps(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_rate_limiting_sampler_pb_qps(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_rate_limiting_sampler_pb(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_rate_limiting_sampler_pb(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_rate_limiting_sampler_pb(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_rate_limiting_sampler_pb(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rate_limiting_sampler_pb(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_rate_limiting_sampler_pb(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rate_limiting_sampler_pb(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_rate_limiting_sampler_pb(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rate_limiting_sampler_pb(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_rate_limiting_sampler_pb(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rate_limiting_sampler_pb(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_rate_limiting_sampler_pb(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rate_limiting_sampler_pb(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_rate_limiting_sampler_pb(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_rate_limiting_sampler_pb(Rest, Z1,
						Z2, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      trace_config_pb ->
	  merge_msg_trace_config_pb(Prev, New, TrUserData);
      probability_sampler_pb ->
	  merge_msg_probability_sampler_pb(Prev, New, TrUserData);
      constant_sampler_pb ->
	  merge_msg_constant_sampler_pb(Prev, New, TrUserData);
      rate_limiting_sampler_pb ->
	  merge_msg_rate_limiting_sampler_pb(Prev, New,
					     TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_trace_config_pb/3}).
merge_msg_trace_config_pb(#trace_config_pb{sampler =
					       PFsampler,
					   max_number_of_attributes =
					       PFmax_number_of_attributes,
					   max_number_of_annotations =
					       PFmax_number_of_annotations,
					   max_number_of_message_events =
					       PFmax_number_of_message_events,
					   max_number_of_links =
					       PFmax_number_of_links},
			  #trace_config_pb{sampler = NFsampler,
					   max_number_of_attributes =
					       NFmax_number_of_attributes,
					   max_number_of_annotations =
					       NFmax_number_of_annotations,
					   max_number_of_message_events =
					       NFmax_number_of_message_events,
					   max_number_of_links =
					       NFmax_number_of_links},
			  TrUserData) ->
    #trace_config_pb{sampler =
			 case {PFsampler, NFsampler} of
			   {{probability_sampler, OPFsampler},
			    {probability_sampler, ONFsampler}} ->
			       {probability_sampler,
				merge_msg_probability_sampler_pb(OPFsampler,
								 ONFsampler,
								 TrUserData)};
			   {{constant_sampler, OPFsampler},
			    {constant_sampler, ONFsampler}} ->
			       {constant_sampler,
				merge_msg_constant_sampler_pb(OPFsampler,
							      ONFsampler,
							      TrUserData)};
			   {{rate_limiting_sampler, OPFsampler},
			    {rate_limiting_sampler, ONFsampler}} ->
			       {rate_limiting_sampler,
				merge_msg_rate_limiting_sampler_pb(OPFsampler,
								   ONFsampler,
								   TrUserData)};
			   {_, undefined} -> PFsampler;
			   _ -> NFsampler
			 end,
		     max_number_of_attributes =
			 if NFmax_number_of_attributes =:= undefined ->
				PFmax_number_of_attributes;
			    true -> NFmax_number_of_attributes
			 end,
		     max_number_of_annotations =
			 if NFmax_number_of_annotations =:= undefined ->
				PFmax_number_of_annotations;
			    true -> NFmax_number_of_annotations
			 end,
		     max_number_of_message_events =
			 if NFmax_number_of_message_events =:= undefined ->
				PFmax_number_of_message_events;
			    true -> NFmax_number_of_message_events
			 end,
		     max_number_of_links =
			 if NFmax_number_of_links =:= undefined ->
				PFmax_number_of_links;
			    true -> NFmax_number_of_links
			 end}.

-compile({nowarn_unused_function,merge_msg_probability_sampler_pb/3}).
merge_msg_probability_sampler_pb(#probability_sampler_pb{samplingProbability
							     =
							     PFsamplingProbability},
				 #probability_sampler_pb{samplingProbability =
							     NFsamplingProbability},
				 _) ->
    #probability_sampler_pb{samplingProbability =
				if NFsamplingProbability =:= undefined ->
				       PFsamplingProbability;
				   true -> NFsamplingProbability
				end}.

-compile({nowarn_unused_function,merge_msg_constant_sampler_pb/3}).
merge_msg_constant_sampler_pb(#constant_sampler_pb{decision
						       = PFdecision},
			      #constant_sampler_pb{decision = NFdecision}, _) ->
    #constant_sampler_pb{decision =
			     if NFdecision =:= undefined -> PFdecision;
				true -> NFdecision
			     end}.

-compile({nowarn_unused_function,merge_msg_rate_limiting_sampler_pb/3}).
merge_msg_rate_limiting_sampler_pb(#rate_limiting_sampler_pb{qps
								 = PFqps},
				   #rate_limiting_sampler_pb{qps = NFqps}, _) ->
    #rate_limiting_sampler_pb{qps =
				  if NFqps =:= undefined -> PFqps;
				     true -> NFqps
				  end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      trace_config_pb ->
	  v_msg_trace_config_pb(Msg, [MsgName], TrUserData);
      probability_sampler_pb ->
	  v_msg_probability_sampler_pb(Msg, [MsgName],
				       TrUserData);
      constant_sampler_pb ->
	  v_msg_constant_sampler_pb(Msg, [MsgName], TrUserData);
      rate_limiting_sampler_pb ->
	  v_msg_rate_limiting_sampler_pb(Msg, [MsgName],
					 TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_trace_config_pb/3}).
-dialyzer({nowarn_function,v_msg_trace_config_pb/3}).
v_msg_trace_config_pb(#trace_config_pb{sampler = F1,
				       max_number_of_attributes = F2,
				       max_number_of_annotations = F3,
				       max_number_of_message_events = F4,
				       max_number_of_links = F5},
		      Path, TrUserData) ->
    case F1 of
      undefined -> ok;
      {probability_sampler, OF1} ->
	  v_msg_probability_sampler_pb(OF1,
				       [probability_sampler, sampler | Path],
				       TrUserData);
      {constant_sampler, OF1} ->
	  v_msg_constant_sampler_pb(OF1,
				    [constant_sampler, sampler | Path],
				    TrUserData);
      {rate_limiting_sampler, OF1} ->
	  v_msg_rate_limiting_sampler_pb(OF1,
					 [rate_limiting_sampler, sampler
					  | Path],
					 TrUserData);
      _ -> mk_type_error(invalid_oneof, F1, [sampler | Path])
    end,
    if F2 == undefined -> ok;
       true ->
	   v_type_int64(F2, [max_number_of_attributes | Path],
			TrUserData)
    end,
    if F3 == undefined -> ok;
       true ->
	   v_type_int64(F3, [max_number_of_annotations | Path],
			TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_int64(F4, [max_number_of_message_events | Path],
			TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_type_int64(F5, [max_number_of_links | Path],
			TrUserData)
    end,
    ok;
v_msg_trace_config_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, trace_config_pb}, X, Path).

-compile({nowarn_unused_function,v_msg_probability_sampler_pb/3}).
-dialyzer({nowarn_function,v_msg_probability_sampler_pb/3}).
v_msg_probability_sampler_pb(#probability_sampler_pb{samplingProbability
							 = F1},
			     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_double(F1, [samplingProbability | Path],
			 TrUserData)
    end,
    ok;
v_msg_probability_sampler_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, probability_sampler_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_constant_sampler_pb/3}).
-dialyzer({nowarn_function,v_msg_constant_sampler_pb/3}).
v_msg_constant_sampler_pb(#constant_sampler_pb{decision
						   = F1},
			  Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [decision | Path], TrUserData)
    end,
    ok;
v_msg_constant_sampler_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, constant_sampler_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_rate_limiting_sampler_pb/3}).
-dialyzer({nowarn_function,v_msg_rate_limiting_sampler_pb/3}).
v_msg_rate_limiting_sampler_pb(#rate_limiting_sampler_pb{qps
							     = F1},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int64(F1, [qps | Path], TrUserData)
    end,
    ok;
v_msg_rate_limiting_sampler_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rate_limiting_sampler_pb},
		  X, Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, trace_config_pb},
      [[{name, sampler}, {rnum, 2},
	{fields,
	 [[{name, probability_sampler}, {fnum, 1}, {rnum, 2},
	   {type, {msg, probability_sampler_pb}},
	   {occurrence, optional}, {opts, []}],
	  [{name, constant_sampler}, {fnum, 2}, {rnum, 2},
	   {type, {msg, constant_sampler_pb}},
	   {occurrence, optional}, {opts, []}],
	  [{name, rate_limiting_sampler}, {fnum, 3}, {rnum, 2},
	   {type, {msg, rate_limiting_sampler_pb}},
	   {occurrence, optional}, {opts, []}]]}],
       [{name, max_number_of_attributes}, {fnum, 4}, {rnum, 3},
	{type, int64}, {occurrence, optional}, {opts, []}],
       [{name, max_number_of_annotations}, {fnum, 5},
	{rnum, 4}, {type, int64}, {occurrence, optional},
	{opts, []}],
       [{name, max_number_of_message_events}, {fnum, 6},
	{rnum, 5}, {type, int64}, {occurrence, optional},
	{opts, []}],
       [{name, max_number_of_links}, {fnum, 7}, {rnum, 6},
	{type, int64}, {occurrence, optional}, {opts, []}]]},
     {{msg, probability_sampler_pb},
      [[{name, samplingProbability}, {fnum, 1}, {rnum, 2},
	{type, double}, {occurrence, optional}, {opts, []}]]},
     {{msg, constant_sampler_pb},
      [[{name, decision}, {fnum, 1}, {rnum, 2}, {type, bool},
	{occurrence, optional}, {opts, []}]]},
     {{msg, rate_limiting_sampler_pb},
      [[{name, qps}, {fnum, 1}, {rnum, 2}, {type, int64},
	{occurrence, optional}, {opts, []}]]}].


get_msg_names() ->
    [trace_config_pb, probability_sampler_pb,
     constant_sampler_pb, rate_limiting_sampler_pb].


get_group_names() -> [].


get_msg_or_group_names() ->
    [trace_config_pb, probability_sampler_pb,
     constant_sampler_pb, rate_limiting_sampler_pb].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(trace_config_pb) ->
    [[{name, sampler}, {rnum, 2},
      {fields,
       [[{name, probability_sampler}, {fnum, 1}, {rnum, 2},
	 {type, {msg, probability_sampler_pb}},
	 {occurrence, optional}, {opts, []}],
	[{name, constant_sampler}, {fnum, 2}, {rnum, 2},
	 {type, {msg, constant_sampler_pb}},
	 {occurrence, optional}, {opts, []}],
	[{name, rate_limiting_sampler}, {fnum, 3}, {rnum, 2},
	 {type, {msg, rate_limiting_sampler_pb}},
	 {occurrence, optional}, {opts, []}]]}],
     [{name, max_number_of_attributes}, {fnum, 4}, {rnum, 3},
      {type, int64}, {occurrence, optional}, {opts, []}],
     [{name, max_number_of_annotations}, {fnum, 5},
      {rnum, 4}, {type, int64}, {occurrence, optional},
      {opts, []}],
     [{name, max_number_of_message_events}, {fnum, 6},
      {rnum, 5}, {type, int64}, {occurrence, optional},
      {opts, []}],
     [{name, max_number_of_links}, {fnum, 7}, {rnum, 6},
      {type, int64}, {occurrence, optional}, {opts, []}]];
find_msg_def(probability_sampler_pb) ->
    [[{name, samplingProbability}, {fnum, 1}, {rnum, 2},
      {type, double}, {occurrence, optional}, {opts, []}]];
find_msg_def(constant_sampler_pb) ->
    [[{name, decision}, {fnum, 1}, {rnum, 2}, {type, bool},
      {occurrence, optional}, {opts, []}]];
find_msg_def(rate_limiting_sampler_pb) ->
    [[{name, qps}, {fnum, 1}, {rnum, 2}, {type, int64},
      {occurrence, optional}, {opts, []}]];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> 'opencensus.proto.trace.v1_pb'.



gpb_version_as_string() ->
    "4.4.1".

gpb_version_as_list() ->
    [4,4,1].
